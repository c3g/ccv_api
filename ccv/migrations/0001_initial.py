# Generated by Django 3.0.5 on 2020-05-19 08:22

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import djangoyearlessdate.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicWorkExperience',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('position_type', models.CharField(blank=True, choices=[('Adjunct', 'Adjunct'), ('Consultation', 'Consultation'), ('Sessional', 'Sessional'), ('Term', 'Term'), ('Visiting Professorship', 'Visiting Professorship')], help_text="The nature of the person's position", max_length=30, null=True)),
                ('position_title', models.CharField(blank=True, help_text="The person's position at the institution", max_length=250, null=True)),
                ('position_status', models.CharField(blank=True, choices=[('Full-time', 'Full-time'), ('Part-time', 'Part-time')], help_text='The status of the position with regard to tenure', max_length=20, null=True)),
                ('academic_rank', models.CharField(blank=True, choices=[('Assistant Professor', 'Assistant Professor'), ('Associate Professor', 'Associate Professor'), ('Emeritus', 'Emeritus'), ('Lecturer', 'Lecturer'), ('Professor', 'Professor')], help_text='The rank of the faculty member in the academic institution', max_length=20, null=True)),
                ('start_date', models.DateField(blank=True, help_text='The date the person started this position', null=True)),
                ('end_date', models.DateField(blank=True, help_text='Date the person did not occupy this position anymore', null=True)),
                ('work_description', models.CharField(blank=True, help_text='Description of the duties for this position', max_length=1000, null=True)),
                ('department', models.CharField(blank=True, help_text='The department within the given institution', max_length=50, null=True)),
                ('campus', models.CharField(blank=True, help_text='The location of the relevant campus of the institution', max_length=100, null=True)),
                ('tenure_status', models.CharField(blank=True, choices=[('Non Tenure Track', 'Non Tenure Track'), ('Tenure', 'Tenure'), ('Tenure Track', 'Tenure Track')], help_text='The status of the position with regard to tenure', max_length=20, null=True)),
                ('tenure_start_date', models.DateField(blank=True, help_text='The date that the person achieved tenure within the named position', null=True)),
                ('tenure_end_date', models.DateField(blank=True, help_text='The date when the tenure stopped, if applicable', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AdministrativeActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AdvisoryActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArtisticContribution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssessmentAndReviewActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('activity', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ccv.Activity')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CanadianCommonCv',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('_id', models.CharField(db_index=True, max_length=40, unique=True)),
                ('slug', models.SlugField(help_text='Short label to be used in URL')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Choreography',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('url', models.URLField(blank=True, help_text='The name of an associated website, if applicable', null=True)),
                ('role', models.CharField(blank=True, help_text="The nature of the person's role", max_length=100, null=True)),
                ('contributors_count', models.IntegerField(blank=True, help_text='The number of contributors', null=True)),
                ('contributors', models.CharField(blank=True, help_text='The names of the other contributors', max_length=200, null=True)),
                ('contribution_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('composer', models.CharField(blank=True, help_text='The name of the composer of the music', max_length=100, null=True)),
                ('company', models.CharField(blank=True, help_text='The name of the performing dance company', max_length=250, null=True)),
                ('premiere_date', models.DateField(blank=True, help_text='The date of the opening of the performance', null=True)),
                ('media_release_date', models.DateField(blank=True, help_text='The date the performance was released to the media', null=True)),
                ('principal_dancers', models.CharField(blank=True, help_text='The names of the principal dancers', max_length=200, null=True)),
                ('artistic_contribution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ArtisticContribution')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Contribution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ccv', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ccv.CanadianCommonCv')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContributionFundingSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organisation', models.CharField(blank=True, help_text='Main funding org name who has funded this contribution', max_length=50, null=True)),
                ('other_organization', models.CharField(blank=True, help_text='If someone cannot find the org from the list', max_length=50, null=True)),
                ('reference_number', models.CharField(blank=True, help_text='reference number for the funds received', max_length=20, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Credential',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, help_text='The name or title of the designation earned', max_length=250, null=True)),
                ('effective_date', models.DateField(blank=True, help_text='The date the designation was received', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date the designation expires, if applicable', null=True)),
                ('description', models.CharField(blank=True, help_text="A description of the person's designation", max_length=1000, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Degree',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(blank=True, choices=[("Bachelor's", "Bachelor's"), ("Bachelor's Equivalent", "Bachelor's Equivalent"), ("Bachelor's Honours", "Bachelor's Honours"), ("Master's Equivalent", "Master's Equivalent"), ("Master's non-Thesis", "Master's non-Thesis"), ("Master's Thesis", "Master's Thesis"), ('Doctorate', 'Doctorate'), ('Doctorate Equivalent', 'Doctorate Equivalent'), ('Post-doctorate', 'Post-doctorate'), ('Certificate', 'Certificate'), ('Diploma', 'Diploma'), ('Habilitation', 'Habilitation'), ('Research Associate', 'Research Associate')], help_text="The designation of the person's degree", max_length=30, null=True)),
                ('name', models.CharField(blank=True, help_text="The name of the person's degree program", max_length=100, null=True)),
                ('specialization', models.CharField(blank=True, help_text="person's major course of study", max_length=100, null=True)),
                ('thesis_title', models.CharField(blank=True, help_text='title of the person’s thesis project', max_length=500, null=True)),
                ('status', models.CharField(blank=True, choices=[('All But Degree', 'All But Degree'), ('Completed', 'Completed'), ('In Progress', 'In Progress'), ('Withdrawn', 'Withdrawn')], help_text="Indicates whether or not the person's degree is completed", max_length=20, null=True)),
                ('start_date', models.DateField(blank=True, help_text="The date the person's study began", null=True)),
                ('end_date', models.DateField(blank=True, help_text="The date the person's study was completed", null=True)),
                ('expected_date', models.DateField(blank=True, help_text="If the person's study is not complete, the date completion is expected", null=True)),
                ('phd_without_masters', models.BooleanField(blank=True, default=False, help_text='If doctorate degree, did the person transfer directly to this degree without completing a Masters?', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Employment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ccv', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ccv.CanadianCommonCv')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FundingSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organization', models.CharField(blank=True, help_text='Organization that provided funding for this project', max_length=50, null=True)),
                ('other_organization', models.CharField(blank=True, help_text="The funding organization's name, only if not in the above column", max_length=50, null=True)),
                ('program_name', models.CharField(blank=True, help_text="The funding organization's name, only if not in the above list", max_length=50, null=True)),
                ('reference_no', models.CharField(blank=True, help_text="organization's funding reference number, if applicable", max_length=20, null=True)),
                ('total_funding_in_canadian_dollar', models.IntegerField(blank=True, help_text='total amount applied for or received from this organization in CAN $', null=True)),
                ('total_funding', models.IntegerField(blank=True, help_text='total amount applied for or received from this organization', null=True)),
                ('total_funding_currency', models.CharField(blank=True, help_text='The currency in which the money was awarded', max_length=20, null=True)),
                ('funding_received', models.IntegerField(blank=True, help_text='From the total funding received from this organization for this project', null=True)),
                ('funding_received_in_canadian_dollar', models.IntegerField(blank=True, help_text='total amount applied for or received from this organization in CAN $', null=True)),
                ('funding_received_currency', models.CharField(blank=True, help_text='The currency in which the money was awarded', max_length=20, null=True)),
                ('start_date', models.DateField(blank=True, help_text='date when the funding from this organization, for this project, started', null=True)),
                ('end_date', models.DateField(blank=True, help_text='date when the funding from this organization, for this project, ended', null=True)),
                ('renewable', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Indicate if the funding received from this organization is renewable', max_length=5, null=True)),
                ('competitive', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Indicate if the funding received from this organization is renewable', max_length=5, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Identification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(choices=[('Dr.', 'Dr.'), ('Mr.', 'Mr.'), ('Mrs.', 'Mrs.'), ('Ms.', 'Ms.'), ('Professor', 'Professor'), ('Reverend', 'Reverend')], max_length=50)),
                ('family_name', models.CharField(help_text="A person's surname", max_length=50)),
                ('first_name', models.CharField(max_length=50)),
                ('middle_name', models.CharField(blank=True, max_length=50, null=True)),
                ('previous_family_name', models.CharField(blank=True, max_length=50, null=True)),
                ('previous_first_name', models.CharField(blank=True, max_length=50, null=True)),
                ('date_of_birth', djangoyearlessdate.models.YearlessDateField(max_length=4)),
                ('sex', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('No Response', 'No Response')], max_length=20, null=True)),
                ('designated_group', models.CharField(blank=True, choices=[('Aboriginal', 'Aboriginal'), ('Disabled', 'Disabled'), ('Visible Minority', 'Visible Minority')], help_text='Group designated by the Employment Equity Act of Canada', max_length=50, null=True)),
                ('correspondence_language', models.CharField(choices=[('English', 'English'), ('French', 'French')], max_length=10)),
                ('canadian_residency_status', models.CharField(blank=True, choices=[('Canadian Citizen', 'Canadian Citizen'), ('Not Applicable', 'Not Applicable'), ('Permanent Resident', 'Permanent Resident'), ('Refugee', 'Refugee'), ('Student Work Permit', 'Student Work Permit'), ('Study Permit', 'Study Permit'), ('Visitor Visa', 'Visitor Visa'), ('Work Permit', 'Work Permit')], max_length=50, null=True)),
                ('permanent_residency', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=50, null=True)),
                ('permanent_residency_start_date', models.DateField(blank=True, null=True)),
                ('ccv', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ccv.CanadianCommonCv')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IntellectualProperty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('contribution', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Contribution')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='KnowledgeTranslation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('start_date', models.DateField(blank=True, help_text='The date the person began this activity.', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date the person finished this activity.', null=True)),
                ('role', models.CharField(blank=True, help_text="The person's role in this activity", max_length=100, null=True)),
                ('knowledge_translation_activity_type', models.CharField(blank=True, max_length=50, null=True)),
                ('group_or_organization_serviced', models.CharField(blank=True, max_length=100, null=True)),
                ('reference_or_citation', models.CharField(blank=True, help_text='Provide references, citations or websites demonstrating the uptake of your research findings', max_length=1000, null=True)),
                ('activity_description', models.CharField(blank=True, help_text='Description of services the person contributed to knowledge translation', max_length=1000, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ccv', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ccv.CanadianCommonCv')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NonAcademicWorkExperience',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('position_title', models.CharField(blank=True, help_text='The position of the person with the employer', max_length=250, null=True)),
                ('position_status', models.CharField(blank=True, choices=[('Full-time', 'Full-time'), ('Part-time', 'Part-time')], help_text="The nature of the person's position", max_length=10, null=True)),
                ('start_date', models.DateField(blank=True, help_text='The date the position started', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date the position ended', null=True)),
                ('work_description', models.CharField(blank=True, help_text='The responsibilities and duties associated with this position', max_length=1000, null=True)),
                ('unit_division', models.CharField(blank=True, help_text='The department within the given company or organization', max_length=100, null=True)),
                ('employment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Employment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('type', models.CharField(blank=True, max_length=50, null=True)),
                ('country', models.CharField(blank=True, max_length=50, null=True)),
                ('subdivision', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OtherOrganization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(blank=True, help_text='The type of organization, only if Other Organization is entered', max_length=20, null=True)),
                ('name', models.CharField(blank=True, help_text="The organization's name, only if not in Organization list", max_length=50, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PerformanceArt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('url', models.URLField(blank=True, help_text='The name of an associated website, if applicable', null=True)),
                ('role', models.CharField(blank=True, help_text="The nature of the person's role", max_length=100, null=True)),
                ('contributors_count', models.IntegerField(blank=True, help_text='The number of contributors', null=True)),
                ('contributors', models.CharField(blank=True, help_text='The names of the other contributors', max_length=200, null=True)),
                ('contribution_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('venue', models.CharField(blank=True, help_text='The venue in which the performance was given', max_length=50, null=True)),
                ('artistic_contribution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ArtisticContribution')),
                ('funding_source', models.ManyToManyField(related_name='ccv_performanceart_related', related_query_name='ccv_performancearts', to='ccv.FundingSource')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProgramDevelopment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('contribution', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ccv.Contribution')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PublicationStaticAbstract',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('contribution_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('url', models.URLField(blank=True, max_length=500, null=True)),
                ('role', models.CharField(blank=True, choices=[('Co-Author', 'Co-Author'), ('Co-Editor', 'Co-Editor'), ('First Listed Author', 'First Listed Author'), ('First Listed Editor', 'First Listed Editor'), ('Last Author', 'Last Author')], help_text="The nature of the person's role", max_length=30, null=True)),
                ('contributors_count', models.IntegerField(blank=True, help_text='The number of contributors', null=True)),
                ('contribution_percentage', models.CharField(blank=True, choices=[('0-10', '0-10'), ('11-20', '11-20'), ('21-30', '21-30'), ('31-40', '31-40'), ('41-50', '41-50'), ('51-60', '51-60'), ('61-70', '61-70'), ('71-80', '71-80'), ('81-90', '81-90'), ('91-100', '91-100')], help_text='approximate percentage (%) of work you contributed towards this publication', max_length=10, null=True)),
                ('doi', models.CharField(blank=True, help_text='digital object identifier (DOI) for this publication', max_length=50, null=True)),
                ('description_of_role', models.CharField(blank=True, help_text='brief description of your contribution role towards this publication', max_length=1000, null=True)),
                ('publishing_status', models.CharField(blank=True, choices=[('Accepted', 'Accepted'), ('In Press', 'In Press'), ('Published', 'Published'), ('Revision Requested', 'Revision Requested'), ('Submitted', 'Submitted')], help_text='The status of the article with regard to publication', max_length=30, null=True)),
                ('year', models.CharField(blank=True, help_text='The year relative to the Publishing Status', max_length=4, null=True)),
                ('publisher', models.CharField(blank=True, help_text='The name of the publisher', max_length=100, null=True)),
                ('publication_location', models.CharField(blank=True, help_text='The place where it was published', max_length=50, null=True)),
                ('funding_source', models.ManyToManyField(related_name='ccv_publicationstaticabstract_related', related_query_name='ccv_publicationstaticabstracts', to='ccv.FundingSource')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Recognition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(blank=True, choices=[('Citation', 'Citation'), ('Distinction', 'Distinction'), ('Honor', 'Honor'), ('Prize / Award', 'Prize / Award')], max_length=20, null=True)),
                ('name', models.CharField(blank=True, help_text='The name or title of the recognition', max_length=250, null=True)),
                ('effective_date', models.DateField(blank=True, help_text='The date when the recognition was awarded', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date when this recognition expires', null=True)),
                ('amount', models.IntegerField(blank=True, help_text='The amount that was awarded for this recognition', null=True)),
                ('amount_in_canadian_dollar', models.IntegerField(blank=True, help_text='Amount in CAN $', null=True)),
                ('currency', models.CharField(blank=True, help_text='The currency in which the money was awarded', max_length=50, null=True)),
                ('ccv', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ccv.CanadianCommonCv')),
                ('organization', models.OneToOneField(blank=True, help_text='The organization that gave the recognition', null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.Organization')),
                ('other_organization', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.OtherOrganization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResearchFundingHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('funding_type', models.CharField(blank=True, choices=[('Contract', 'Contract'), ('Fellowship', 'Fellowship'), ('Grant', 'Grant'), ('Research Chair', 'Research Chair'), ('Scholarship', 'Scholarship')], help_text='The nature of the funding received', max_length=20, null=True)),
                ('start_date', models.DateField(blank=True, help_text='The date when the funding for this project started.', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date when the funding for this project ended.', null=True)),
                ('funding_title', models.CharField(blank=True, help_text='The nature of the grant received', max_length=250, null=True)),
                ('grant_type', models.CharField(blank=True, choices=[('Equipment', 'Equipment'), ('Establishment', 'Establishment'), ('Infrastructure', 'Infrastructure'), ('Operating', 'Operating'), ('Workshop', 'Workshop')], max_length=20, null=True)),
                ('project_description', models.CharField(blank=True, help_text='description of project for which funding was received', max_length=1000, null=True)),
                ('clinical_research_project', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True)),
                ('funding_status', models.CharField(blank=True, choices=[('Awarded', 'Awarded'), ('Completed', 'Completed'), ('Declined', 'Declined'), ('Under Review', 'Under Review')], help_text='current status of the funding of the overall project.', max_length=30, null=True)),
                ('funding_role', models.CharField(blank=True, choices=[('Co-applicant', 'Co-applicant'), ('Co-investigator', 'Co-investigator'), ('Co-knowledge User', 'Co-knowledge User'), ('Collaborator', 'Collaborator'), ('Decision Maker', 'Decision Maker'), ('Policy Maker', 'Policy Maker'), ('Principal Applicant', 'Principal Applicant'), ('Principal Investigator', 'Principal Investigator'), ('Principal Knowledge User', 'Principal Knowledge User')], help_text="Person's role in this research, as defined by the funding organization", max_length=30, null=True)),
                ('research_uptake', models.CharField(blank=True, help_text='strategies used to promote the uptake of your research findings.', max_length=1000, null=True)),
                ('ccv', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ccv.CanadianCommonCv')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StudentSupervision',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SupervisoryActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WorkingPaper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('contribution_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('url', models.URLField(blank=True, max_length=500, null=True)),
                ('role', models.CharField(blank=True, choices=[('Co-Author', 'Co-Author'), ('Co-Editor', 'Co-Editor'), ('First Listed Author', 'First Listed Author'), ('First Listed Editor', 'First Listed Editor'), ('Last Author', 'Last Author')], help_text="The nature of the person's role", max_length=30, null=True)),
                ('contributors_count', models.IntegerField(blank=True, help_text='The number of contributors', null=True)),
                ('contribution_percentage', models.CharField(blank=True, choices=[('0-10', '0-10'), ('11-20', '11-20'), ('21-30', '21-30'), ('31-40', '31-40'), ('41-50', '41-50'), ('51-60', '51-60'), ('61-70', '61-70'), ('71-80', '71-80'), ('81-90', '81-90'), ('91-100', '91-100')], help_text='approximate percentage (%) of work you contributed towards this publication', max_length=10, null=True)),
                ('doi', models.CharField(blank=True, help_text='digital object identifier (DOI) for this publication', max_length=50, null=True)),
                ('description_of_role', models.CharField(blank=True, help_text='brief description of your contribution role towards this publication', max_length=1000, null=True)),
                ('authors', models.CharField(blank=True, help_text='The names of other authors', max_length=1000, null=True)),
                ('editors', models.CharField(blank=True, help_text='The names of the editors', max_length=200, null=True)),
                ('year_completed', models.CharField(blank=True, help_text='The year the paper was completed', max_length=4, null=True)),
                ('pages_count', models.IntegerField(blank=True, help_text='The number of pages in the document', null=True)),
                ('funding_source', models.ManyToManyField(related_name='ccv_workingpaper_related', related_query_name='ccv_workingpapers', to='ccv.FundingSource')),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Publication')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Website',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(blank=True, choices=[('Blog', 'Blog'), ('Community', 'Community'), ('Corporate', 'Corporate'), ('Personal', 'Personal'), ('Social Media', 'Social Media')], help_text='The nature of the given web address', max_length=20, null=True)),
                ('url', models.URLField(blank=True, help_text="The person's web address", max_length=100, null=True)),
                ('personal_information', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Identification')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VisualArtwork',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('url', models.URLField(blank=True, help_text='The name of an associated website, if applicable', null=True)),
                ('role', models.CharField(blank=True, help_text="The nature of the person's role", max_length=100, null=True)),
                ('contributors_count', models.IntegerField(blank=True, help_text='The number of contributors', null=True)),
                ('contributors', models.CharField(blank=True, help_text='The names of the other contributors', max_length=200, null=True)),
                ('contribution_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('publication_date', models.DateField(blank=True, help_text='Date that the work was published', null=True)),
                ('artistic_contribution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ArtisticContribution')),
                ('funding_source', models.ManyToManyField(related_name='ccv_visualartwork_related', related_query_name='ccv_visualartworks', to='ccv.FundingSource')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VideoRecording',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('url', models.URLField(blank=True, help_text='The name of an associated website, if applicable', null=True)),
                ('role', models.CharField(blank=True, help_text="The nature of the person's role", max_length=100, null=True)),
                ('contributors_count', models.IntegerField(blank=True, help_text='The number of contributors', null=True)),
                ('contributors', models.CharField(blank=True, help_text='The names of the other contributors', max_length=200, null=True)),
                ('contribution_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('director', models.CharField(blank=True, help_text='The name of the director', max_length=100, null=True)),
                ('producer', models.CharField(blank=True, help_text='The name of the producer', max_length=100, null=True)),
                ('distributor', models.CharField(blank=True, help_text='The name of the producer', max_length=100, null=True)),
                ('release_date', models.DateField(blank=True, help_text='The date of initial release of the recording', null=True)),
                ('artistic_contribution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ArtisticContribution')),
                ('funding_source', models.ManyToManyField(related_name='ccv_videorecording_related', related_query_name='ccv_videorecordings', to='ccv.FundingSource')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('researcher_status', models.CharField(blank=True, choices=[('Doctoral Student', 'Doctoral Student'), ("Master's Student", "Master's Student"), ('Post-doctoral Student', 'Post-doctoral Student'), ('Researcher', 'Researcher')], help_text='research status', max_length=30, null=True)),
                ('career_start_date', models.DateField(blank=True, help_text='When did you start your research career', null=True)),
                ('engaged_in_clinical_research', models.BooleanField(default=False, help_text='if you are involved in clinical research activities (with drugs)')),
                ('key_theory', models.CharField(blank=True, help_text='The key theories and methodologies used in research', max_length=500, null=True)),
                ('research_interest', models.CharField(blank=True, max_length=1000, null=True)),
                ('experience_summary', models.CharField(blank=True, help_text='summary of research experience', max_length=1000, null=True)),
                ('country', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, null=True, size=None)),
                ('ccv', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ccv.CanadianCommonCv')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Trademark',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, help_text='The name of the patent', max_length=250, null=True)),
                ('filing_date', models.DateField(blank=True, help_text='The year patent was issued', null=True)),
                ('date_issued', models.DateField(blank=True, help_text='The date the license was issued', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date of expiry of the license', null=True)),
                ('contribution_or_impact', models.CharField(blank=True, help_text='Provide a concise description of this contribution and its value to and impact on the area of research for which you are applying for funding', max_length=1000, null=True)),
                ('url', models.URLField(blank=True, help_text='The name of an associated website, if applicable', max_length=100, null=True)),
                ('status', models.CharField(blank=True, help_text='Status of the trademark registration', max_length=20, null=True)),
                ('funding_source', models.ManyToManyField(related_name='ccv_trademark_related', related_query_name='ccv_trademarks', to='ccv.FundingSource')),
                ('intellectual_property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.IntellectualProperty')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ThesisDissertation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('contribution_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('url', models.URLField(blank=True, max_length=500, null=True)),
                ('role', models.CharField(blank=True, choices=[('Co-Author', 'Co-Author'), ('Co-Editor', 'Co-Editor'), ('First Listed Author', 'First Listed Author'), ('First Listed Editor', 'First Listed Editor'), ('Last Author', 'Last Author')], help_text="The nature of the person's role", max_length=30, null=True)),
                ('contributors_count', models.IntegerField(blank=True, help_text='The number of contributors', null=True)),
                ('contribution_percentage', models.CharField(blank=True, choices=[('0-10', '0-10'), ('11-20', '11-20'), ('21-30', '21-30'), ('31-40', '31-40'), ('41-50', '41-50'), ('51-60', '51-60'), ('61-70', '61-70'), ('71-80', '71-80'), ('81-90', '81-90'), ('91-100', '91-100')], help_text='approximate percentage (%) of work you contributed towards this publication', max_length=10, null=True)),
                ('doi', models.CharField(blank=True, help_text='digital object identifier (DOI) for this publication', max_length=50, null=True)),
                ('description_of_role', models.CharField(blank=True, help_text='brief description of your contribution role towards this publication', max_length=1000, null=True)),
                ('supervisor', models.CharField(blank=True, help_text='The family and first name of the supervisor', max_length=100, null=True)),
                ('completion_year', models.CharField(blank=True, help_text='The year the dissertation was completed', max_length=4, null=True)),
                ('degree_type', models.CharField(blank=True, choices=[("Bachelor's", "Bachelor's"), ("Bachelor's Equivalent", "Bachelor's Equivalent"), ("Bachelor's Honours", "Bachelor's Honours"), ("Master's Equivalent", "Master's Equivalent"), ("Master's non-Thesis", "Master's non-Thesis"), ("Master's Thesis", "Master's Thesis"), ('Doctorate', 'Doctorate'), ('Doctorate Equivalent', 'Doctorate Equivalent'), ('Post-doctorate', 'Post-doctorate'), ('Certificate', 'Certificate'), ('Diploma', 'Diploma'), ('Habilitation', 'Habilitation'), ('Research Associate', 'Research Associate')], help_text="The designation of the person's degree", max_length=30, null=True)),
                ('pages_count', models.IntegerField(blank=True, help_text='Number of pages of the dissertation', null=True)),
                ('funding_source', models.ManyToManyField(related_name='ccv_thesisdissertation_related', related_query_name='ccv_thesisdissertations', to='ccv.FundingSource')),
                ('organization', models.OneToOneField(blank=True, help_text='The name of the institution that consigned the report', null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.Organization')),
                ('other_organization', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.OtherOrganization')),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Publication')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TheatrePerformanceAndProduction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('url', models.URLField(blank=True, help_text='The name of an associated website, if applicable', null=True)),
                ('role', models.CharField(blank=True, help_text="The nature of the person's role", max_length=100, null=True)),
                ('contributors_count', models.IntegerField(blank=True, help_text='The number of contributors', null=True)),
                ('contributors', models.CharField(blank=True, help_text='The names of the other contributors', max_length=200, null=True)),
                ('contribution_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('producer', models.CharField(blank=True, help_text='The name of the producer of the work', max_length=100, null=True)),
                ('venue', models.CharField(blank=True, help_text='The venue in which the exhibition was given', max_length=50, null=True)),
                ('first_performance_date', models.DateField(blank=True, help_text='The date the work was first performed or exhibited', null=True)),
                ('artistic_contribution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ArtisticContribution')),
                ('funding_source', models.ManyToManyField(related_name='ccv_theatreperformanceandproduction_related', related_query_name='ccv_theatreperformanceandproductions', to='ccv.FundingSource')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TextInterview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('topic', models.CharField(blank=True, help_text='The subject of the interview', max_length=250, null=True)),
                ('interviewer', models.CharField(blank=True, help_text="The interviewers' names", max_length=100, null=True)),
                ('description', models.CharField(blank=True, help_text='description of this contribution and its value to the area of research', max_length=1000, null=True)),
                ('url', models.URLField(blank=True, help_text='The name of an associated website, if applicable', max_length=100, null=True)),
                ('forum', models.CharField(blank=True, help_text='The name of the forum for which the interview was conducted', max_length=250, null=True)),
                ('publication_date', models.DateField(blank=True, help_text='The date on which the interview was first published', null=True)),
                ('contribution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Contribution')),
                ('funding_source', models.ManyToManyField(related_name='ccv_textinterview_related', related_query_name='ccv_textinterviews', to='ccv.FundingSource')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('contribution_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('url', models.URLField(blank=True, max_length=500, null=True)),
                ('role', models.CharField(blank=True, choices=[('Co-Author', 'Co-Author'), ('Co-Editor', 'Co-Editor'), ('First Listed Author', 'First Listed Author'), ('First Listed Editor', 'First Listed Editor'), ('Last Author', 'Last Author')], help_text="The nature of the person's role", max_length=30, null=True)),
                ('contributors_count', models.IntegerField(blank=True, help_text='The number of contributors', null=True)),
                ('contribution_percentage', models.CharField(blank=True, choices=[('0-10', '0-10'), ('11-20', '11-20'), ('21-30', '21-30'), ('31-40', '31-40'), ('41-50', '41-50'), ('51-60', '51-60'), ('61-70', '61-70'), ('71-80', '71-80'), ('81-90', '81-90'), ('91-100', '91-100')], help_text='approximate percentage (%) of work you contributed towards this publication', max_length=10, null=True)),
                ('doi', models.CharField(blank=True, help_text='digital object identifier (DOI) for this publication', max_length=50, null=True)),
                ('description_of_role', models.CharField(blank=True, help_text='brief description of your contribution role towards this publication', max_length=1000, null=True)),
                ('authors', models.CharField(blank=True, help_text='The names of other authors', max_length=1000, null=True)),
                ('editors', models.CharField(blank=True, help_text='The names of the editors', max_length=200, null=True)),
                ('year_released', models.CharField(blank=True, help_text='The year the guideline was first released', max_length=4, null=True)),
                ('funding_source', models.ManyToManyField(related_name='ccv_test_related', related_query_name='ccv_tests', to='ccv.FundingSource')),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Publication')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TemporalPeriod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('from_year', models.IntegerField(blank=True, help_text='The starting year of the temporal period', null=True)),
                ('from_year_period', models.CharField(blank=True, choices=[('AD', 'AD'), ('BC', 'BC')], help_text='The period of the starting year', max_length=2, null=True)),
                ('to_year', models.IntegerField(blank=True, help_text='The end year of the temporal period', null=True)),
                ('to_year_period', models.CharField(blank=True, choices=[('AD', 'AD'), ('BC', 'BC')], help_text='The period of the ending year', max_length=2, null=True)),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.UserProfile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Telephone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('phone_type', models.CharField(blank=True, choices=[('Fax', 'Fax'), ('Home', 'Home'), ('Laboratory', 'Laboratory'), ('Mobile', 'Mobile'), ('Pager', 'Pager'), ('Temporary', 'Temporary'), ('Work', 'Work')], help_text='The nature of the given phone number', max_length=50, null=True)),
                ('country_code', models.CharField(blank=True, help_text='The country code with no space, bracket or dash, if located outside of North America e.g. 011', max_length=5, null=True)),
                ('area_code', models.CharField(blank=True, help_text='The area code with no space, bracket or dash e.g. 613', max_length=5, null=True)),
                ('number', models.CharField(blank=True, help_text='The telephone number with no space, bracket or dash e.g. 1234567', max_length=12, null=True)),
                ('extension', models.CharField(blank=True, help_text='The extension, if applicable, with no space, bracket or dash e.g. 5678', max_length=6, null=True)),
                ('start_date', models.DateField(blank=True, help_text='If the given number is temporary, the date upon which it becomes active', null=True)),
                ('end_date', models.DateField(blank=True, help_text='If the given number is temporary, the date upon which it becomes inact', null=True)),
                ('personal_information', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Identification')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TechnologicalApplication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subfield', models.CharField(blank=True, max_length=50, null=True)),
                ('category', models.CharField(blank=True, choices=[('Agro-alimentary', 'Agro-alimentary'), ('Chemistry / Biochemistry', 'Chemistry / Biochemistry'), ('Medical materials and instrumentation', 'Medical materials and instrumentation'), ('Orthopaedic devices', 'Orthopaedic devices'), ('Pharmacy', 'Pharmacy')], max_length=50, null=True)),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.UserProfile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TeachingActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('activity', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ccv.Activity')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Supervisor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, null=True)),
                ('start_date', models.DateField(blank=True, help_text='The date when the supervision started', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date when the supervision ended', null=True)),
                ('degree', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Degree')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SoundDesign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('url', models.URLField(blank=True, help_text='The name of an associated website, if applicable', null=True)),
                ('role', models.CharField(blank=True, help_text="The nature of the person's role", max_length=100, null=True)),
                ('contributors_count', models.IntegerField(blank=True, help_text='The number of contributors', null=True)),
                ('contributors', models.CharField(blank=True, help_text='The names of the other contributors', max_length=200, null=True)),
                ('contribution_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('writer', models.CharField(blank=True, help_text='The writer of the show', max_length=100, null=True)),
                ('producer', models.CharField(blank=True, help_text='The producer of the show', max_length=100, null=True)),
                ('venue', models.CharField(blank=True, help_text='The venue in which the exhibition was given', max_length=50, null=True)),
                ('opening_date', models.DateField(blank=True, help_text='The date of the opening of the performance', null=True)),
                ('funding_source', models.ManyToManyField(related_name='ccv_sounddesign_related', related_query_name='ccv_sounddesigns', to='ccv.FundingSource')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SetDesign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('url', models.URLField(blank=True, help_text='The name of an associated website, if applicable', null=True)),
                ('role', models.CharField(blank=True, help_text="The nature of the person's role", max_length=100, null=True)),
                ('contributors_count', models.IntegerField(blank=True, help_text='The number of contributors', null=True)),
                ('contributors', models.CharField(blank=True, help_text='The names of the other contributors', max_length=200, null=True)),
                ('contribution_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('writer', models.CharField(blank=True, help_text='The writer of the show', max_length=100, null=True)),
                ('producer', models.CharField(blank=True, help_text='The producer of the show', max_length=100, null=True)),
                ('venue', models.CharField(blank=True, help_text='The venue in which the exhibition was given', max_length=50, null=True)),
                ('opening_date', models.DateField(blank=True, help_text='The date of the opening of the performance', null=True)),
                ('funding_source', models.ManyToManyField(related_name='ccv_setdesign_related', related_query_name='ccv_setdesigns', to='ccv.FundingSource')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Scripts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('url', models.URLField(blank=True, help_text='The name of an associated website, if applicable', null=True)),
                ('role', models.CharField(blank=True, help_text="The nature of the person's role", max_length=100, null=True)),
                ('contributors_count', models.IntegerField(blank=True, help_text='The number of contributors', null=True)),
                ('contributors', models.CharField(blank=True, help_text='The names of the other contributors', max_length=200, null=True)),
                ('contribution_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('publication_date', models.DateField(blank=True, help_text='The date script was completed', null=True)),
                ('authors', models.CharField(blank=True, help_text='The names of other authors of the script', max_length=200, null=True)),
                ('editors', models.CharField(blank=True, help_text='The names of the editors', max_length=200, null=True)),
                ('artistic_contribution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ArtisticContribution')),
                ('funding_source', models.ManyToManyField(related_name='ccv_scripts_related', related_query_name='ccv_scriptss', to='ccv.FundingSource')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResearchUptakeHolder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('stakeholder', models.CharField(blank=True, choices=[('Academic Personnel', 'Academic Personnel'), ('Charity Organizations', 'Charity Organizations'), ('Elders', 'Elders'), ('General Public', 'General Public'), ('Government Personnel', 'Government Personnel'), ('Healthcare Personnel', 'Healthcare Personnel'), ('Industrial Association/Producer Group', 'Industrial Association/Producer Group'), ('Industrial Consortium', 'Industrial Consortium'), ('Industry/Business (>500 employees)', 'Industry/Business (>500 employees)'), ('Industry/Business-Medium (100 to 500 employees)', 'Industry/Business-Medium (100 to 500 employees)'), ('Industry/Business-Small (<100 employees)', 'Industry/Business-Small (<100 employees)'), ('Patients', 'Patients'), ('Policy Maker/Regulator', 'Policy Maker/Regulator'), ('Private Not-for-Profit Organization', 'Private Not-for-Profit Organization'), ('The Media', 'The Media'), ('Utility', 'Utility')], help_text='The group or individual which uptake research findings', max_length=50, null=True)),
                ('research_funding_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ResearchFundingHistory')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResearchSpecializationKeyword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('keyword', models.CharField(blank=True, max_length=50, null=True)),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.UserProfile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResearchSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('country', models.CharField(blank=True, help_text='The place where the research was done', max_length=50, null=True)),
                ('subdivision', models.CharField(blank=True, help_text='Division where research was done', max_length=50, null=True)),
                ('setting_type', models.CharField(blank=True, help_text='The type of environment where the research was conducted', max_length=10, null=True)),
                ('research_funding_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ResearchFundingHistory')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResearchFundingApplicationAssessmentActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('start_date', models.DateField(blank=True, help_text='The date the person began this activity.', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date the person finished this activity.', null=True)),
                ('funding_reviewer_role', models.CharField(blank=True, choices=[('Chair', 'Chair'), ('Committee Member', 'Committee Member'), ('External Reviewer', 'External Reviewer'), ('Scientific Officer', 'Scientific Officer')], help_text="The person's role in this activity", max_length=20, null=True)),
                ('assessment_type', models.CharField(blank=True, choices=[('Funder', 'Funder'), ('Organization', 'Organization')], help_text='The nature of the assessment. Indicate whether the assessment was done for a Funding Organization (Funder) or another organization (Institution)', max_length=20, null=True)),
                ('reviewer_type', models.CharField(blank=True, choices=[('Academic Reviewer', 'Academic Reviewer'), ('Industry', 'Industry'), ('Knowledge User', 'Knowledge User'), ('Non-academic Reviewer', 'Non-academic Reviewer')], help_text='The nature of the reviewer', max_length=30, null=True)),
                ('committee_name', models.CharField(blank=True, help_text='The committee name for the funding assessment', max_length=250, null=True)),
                ('funding_organization', models.CharField(blank=True, help_text='The name of the organization which provided the grant or scholarship', max_length=100, null=True)),
                ('applications_assessed_count', models.IntegerField(blank=True, help_text='The number of applications that the person assessed', null=True)),
                ('assessment_review_activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.AssessmentAndReviewActivity')),
                ('organization', models.OneToOneField(blank=True, help_text='The organization for which the assessment was made', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Organization')),
                ('other_organization', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.OtherOrganization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResearchDiscipline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('discipline', models.CharField(blank=True, max_length=50, null=True)),
                ('sector_of_discipline', models.CharField(blank=True, max_length=50, null=True)),
                ('field', models.CharField(blank=True, max_length=50, null=True)),
                ('academic_work_experience', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.AcademicWorkExperience')),
                ('credential', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.Credential')),
                ('degree', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.Degree')),
                ('non_academic_work_experience', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.NonAcademicWorkExperience')),
                ('recognition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.Recognition')),
                ('research_funding_assessment_activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ResearchFundingApplicationAssessmentActivity')),
                ('research_funding_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ResearchFundingHistory')),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.UserProfile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResearchCentre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('country', models.CharField(blank=True, max_length=50, null=True)),
                ('subdivision', models.CharField(blank=True, max_length=50, null=True)),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.UserProfile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('contribution_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('url', models.URLField(blank=True, max_length=500, null=True)),
                ('role', models.CharField(blank=True, choices=[('Co-Author', 'Co-Author'), ('Co-Editor', 'Co-Editor'), ('First Listed Author', 'First Listed Author'), ('First Listed Editor', 'First Listed Editor'), ('Last Author', 'Last Author')], help_text="The nature of the person's role", max_length=30, null=True)),
                ('contributors_count', models.IntegerField(blank=True, help_text='The number of contributors', null=True)),
                ('contribution_percentage', models.CharField(blank=True, choices=[('0-10', '0-10'), ('11-20', '11-20'), ('21-30', '21-30'), ('31-40', '31-40'), ('41-50', '41-50'), ('51-60', '51-60'), ('61-70', '61-70'), ('71-80', '71-80'), ('81-90', '81-90'), ('91-100', '91-100')], help_text='approximate percentage (%) of work you contributed towards this publication', max_length=10, null=True)),
                ('doi', models.CharField(blank=True, help_text='digital object identifier (DOI) for this publication', max_length=50, null=True)),
                ('description_of_role', models.CharField(blank=True, help_text='brief description of your contribution role towards this publication', max_length=1000, null=True)),
                ('authors', models.CharField(blank=True, help_text='The names of other authors', max_length=1000, null=True)),
                ('editors', models.CharField(blank=True, help_text='The names of the editors', max_length=200, null=True)),
                ('year_submitted', models.CharField(blank=True, help_text='The year the report was submitted to the institution', max_length=4, null=True)),
                ('pages_count', models.IntegerField(blank=True, help_text='The number of pages in the document', null=True)),
                ('is_synthesis', models.BooleanField(blank=True, help_text='contextualization and integration of research findings of individual research studies within the larger body of knowledge on the topic', null=True)),
                ('funding_source', models.ManyToManyField(related_name='ccv_report_related', related_query_name='ccv_reports', to='ccv.FundingSource')),
                ('organization', models.OneToOneField(blank=True, help_text='The name of the institution that consigned the report', null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.Organization')),
                ('other_organization', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.OtherOrganization')),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Publication')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RegisteredCopyright',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, help_text='The name of the patent', max_length=250, null=True)),
                ('filing_date', models.DateField(blank=True, help_text='The year patent was issued', null=True)),
                ('date_issued', models.DateField(blank=True, help_text='The date the license was issued', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date of expiry of the license', null=True)),
                ('contribution_or_impact', models.CharField(blank=True, help_text='Provide a concise description of this contribution and its value to and impact on the area of research for which you are applying for funding', max_length=1000, null=True)),
                ('url', models.URLField(blank=True, help_text='The name of an associated website, if applicable', max_length=100, null=True)),
                ('status', models.CharField(blank=True, help_text='status of the copyright registration', max_length=20, null=True)),
                ('funding_source', models.ManyToManyField(related_name='ccv_registeredcopyright_related', related_query_name='ccv_registeredcopyrights', to='ccv.FundingSource')),
                ('intellectual_property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.IntellectualProperty')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RadioAndTvProgram',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('url', models.URLField(blank=True, help_text='The name of an associated website, if applicable', null=True)),
                ('role', models.CharField(blank=True, help_text="The nature of the person's role", max_length=100, null=True)),
                ('contributors_count', models.IntegerField(blank=True, help_text='The number of contributors', null=True)),
                ('contributors', models.CharField(blank=True, help_text='The names of the other contributors', max_length=200, null=True)),
                ('contribution_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('episode_title', models.CharField(blank=True, help_text='The title of the episode of the program', max_length=250, null=True)),
                ('no_of_episodes', models.IntegerField(blank=True, help_text='The number of episodes for which the person took part', null=True)),
                ('series_title', models.CharField(blank=True, help_text='The title of the series', max_length=250, null=True)),
                ('publication_date', models.DateField(blank=True, help_text='The year and month the composition was published.', null=True)),
                ('publication_location', models.CharField(blank=True, help_text='The place where the composition was published', max_length=50, null=True)),
                ('artistic_contribution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ArtisticContribution')),
                ('funding_source', models.ManyToManyField(related_name='ccv_radioandtvprogram_related', related_query_name='ccv_radioandtvprograms', to='ccv.FundingSource')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PromotionTenureAssessmentActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('start_date', models.DateField(blank=True, help_text='The date the person began this activity.', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date the person finished this activity.', null=True)),
                ('role', models.CharField(blank=True, help_text="The person's role in this activity", max_length=100, null=True)),
                ('department', models.CharField(blank=True, help_text='The department within the given organization', max_length=100, null=True)),
                ('assessments_count', models.IntegerField(blank=True, help_text='The number of applications which were assessed by the person', null=True)),
                ('description', models.CharField(blank=True, help_text='Description of the services contributed by the person, in conjunction with the consideration of an application for promotion/tenure, to examine something, formulate a judgement, and a statement of that judgement.', max_length=1000, null=True)),
                ('assessment_review_activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.AssessmentAndReviewActivity')),
                ('organization', models.OneToOneField(blank=True, help_text='The organization for which the assessment was made', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Organization')),
                ('other_organization', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.OtherOrganization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Presentation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, help_text='The title of the presentation', max_length=250, null=True)),
                ('event_name', models.CharField(blank=True, help_text='The name of the event in which the person gave the presentation', max_length=250, null=True)),
                ('location', models.CharField(blank=True, help_text='The country where the conference took place', max_length=50, null=True)),
                ('city', models.CharField(blank=True, help_text='The city where the conference took place', max_length=50, null=True)),
                ('main_audience', models.CharField(blank=True, choices=[('Decision Maker', 'Decision Maker'), ('General Public', 'General Public'), ('Knowledge User', 'Knowledge User'), ('Researcher', 'Researcher')], help_text='The nature of the audience', max_length=20, null=True)),
                ('is_invited', models.BooleanField(blank=True, help_text='Indicate whether the person was invited to present this information', null=True)),
                ('is_keynote', models.BooleanField(blank=True, help_text='Indicate whether the person gave the keynote address at this event', null=True)),
                ('is_competitive', models.BooleanField(blank=True, help_text='Indicate if participation in this event was competitive', null=True)),
                ('presentation_year', models.CharField(blank=True, help_text='The year the presentation was given', max_length=4, null=True)),
                ('description', models.CharField(blank=True, help_text='Concise description of this contribution and its value to the area of research for which you are applying for funding', max_length=1000, null=True)),
                ('url', models.URLField(blank=True, help_text='The name of an associated website, if applicable', max_length=50, null=True)),
                ('co_presenters', models.CharField(blank=True, help_text='The names of other persons presenting this topic, if applicable', max_length=200, null=True)),
                ('contribution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Contribution')),
                ('funding_source', models.ManyToManyField(related_name='ccv_presentation_related', related_query_name='ccv_presentations', to='ccv.FundingSource')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Poetry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('url', models.URLField(blank=True, help_text='The name of an associated website, if applicable', null=True)),
                ('role', models.CharField(blank=True, help_text="The nature of the person's role", max_length=100, null=True)),
                ('contributors_count', models.IntegerField(blank=True, help_text='The number of contributors', null=True)),
                ('contributors', models.CharField(blank=True, help_text='The names of the other contributors', max_length=200, null=True)),
                ('contribution_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('venue', models.CharField(blank=True, help_text='The venue in which the performance or exhibition was given, if applicable', max_length=250, null=True)),
                ('appeared_in', models.CharField(blank=True, help_text='The name of the publication in which the work appeared, if applicable', max_length=50, null=True)),
                ('volume', models.CharField(blank=True, help_text='The volume, if applicable', max_length=50, null=True)),
                ('issue', models.CharField(blank=True, help_text='The issue, if applicable', max_length=50, null=True)),
                ('page_range', models.CharField(blank=True, help_text="The page range with a dash ('-') as separator (e.g. 234-256), if applicable", max_length=50, null=True)),
                ('date', models.DateField(blank=True, help_text='The date of first presentation/production', null=True)),
                ('publisher', models.CharField(blank=True, help_text='The name of the publisher, if applicable', max_length=50, null=True)),
                ('country', models.CharField(blank=True, help_text='The country of the publication/performance', max_length=50, null=True)),
                ('authors', models.CharField(blank=True, max_length=200, null=True)),
                ('editors', models.CharField(blank=True, max_length=200, null=True)),
                ('artistic_contribution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ArtisticContribution')),
                ('funding_source', models.ManyToManyField(related_name='ccv_poetry_related', related_query_name='ccv_poetrys', to='ccv.FundingSource')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PerformanceDate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateField(blank=True, help_text='The date of a major performance', null=True)),
                ('performance_art', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.PerformanceArt')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Patent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, help_text='The name of the patent', max_length=250, null=True)),
                ('filing_date', models.DateField(blank=True, help_text='The year patent was issued', null=True)),
                ('date_issued', models.DateField(blank=True, help_text='The date the license was issued', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date of expiry of the license', null=True)),
                ('contribution_or_impact', models.CharField(blank=True, help_text='Provide a concise description of this contribution and its value to and impact on the area of research for which you are applying for funding', max_length=1000, null=True)),
                ('url', models.URLField(blank=True, help_text='The name of an associated website, if applicable', max_length=100, null=True)),
                ('number', models.CharField(blank=True, help_text='The number of the patent', max_length=50, null=True)),
                ('location', models.CharField(blank=True, help_text='The country in which the patent resides', max_length=50, null=True)),
                ('status', models.CharField(blank=True, choices=[('Allowed', 'Allowed'), ('Expired', 'Expired'), ('Granted/Issued', 'Granted/Issued'), ('Lapsed', 'Lapsed'), ('Pending', 'Pending'), ('Withdrawn', 'Withdrawn')], help_text='Status of the patent', max_length=20, null=True)),
                ('inventors', models.CharField(blank=True, max_length=1000, null=True)),
                ('funding_source', models.ManyToManyField(related_name='ccv_patent_related', related_query_name='ccv_patents', to='ccv.FundingSource')),
                ('intellectual_property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.IntellectualProperty')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ParticipationActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('activity', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Activity')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OtherMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('role', models.CharField(blank=True, help_text="The person's role in this activity", max_length=20, null=True)),
                ('name', models.CharField(blank=True, help_text='The name of the committee', max_length=250, null=True)),
                ('start_date', models.DateField(blank=True, help_text='The date on which membership began', null=True)),
                ('description', models.CharField(blank=True, help_text='Description of services contributed by the person as part of a committee', max_length=1000, null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date on which membership ended, if applicable', null=True)),
                ('membership', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Membership')),
                ('organization', models.OneToOneField(blank=True, help_text='The name of the organisation of which the person is a member', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Organization')),
                ('other_organization', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.OtherOrganization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OtherInvestigator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, help_text='Name of the investigator who has participated in this research project. Family name followed by a comma and by the the first name, without any punctuation', max_length=100, null=True)),
                ('role', models.CharField(blank=True, choices=[('Co-applicant', 'Co-applicant'), ('Co-investigator', 'Co-investigator'), ('Co-knowledge User', 'Co-knowledge User'), ('Collaborator', 'Collaborator'), ('Decision Maker', 'Decision Maker'), ('Policy Maker', 'Policy Maker'), ('Principal Applicant', 'Principal Applicant'), ('Principal Investigator', 'Principal Investigator'), ('Principal Knowledge User', 'Principal Knowledge User')], help_text='The role of this investigator', max_length=30, null=True)),
                ('research_funding_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ResearchFundingHistory')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OtherArtisticContribution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('url', models.URLField(blank=True, help_text='The name of an associated website, if applicable', null=True)),
                ('role', models.CharField(blank=True, help_text="The nature of the person's role", max_length=100, null=True)),
                ('contributors_count', models.IntegerField(blank=True, help_text='The number of contributors', null=True)),
                ('contributors', models.CharField(blank=True, help_text='The names of the other contributors', max_length=200, null=True)),
                ('contribution_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('date', models.DateField(blank=True, help_text='The date of first presentation/production', null=True)),
                ('venue', models.CharField(blank=True, help_text='The venue in which the performance or exhibition was given, if applicable', max_length=200, null=True)),
                ('artistic_contribution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ArtisticContribution')),
                ('funding_source', models.ManyToManyField(related_name='ccv_otherartisticcontribution_related', related_query_name='ccv_otherartisticcontributions', to='ccv.FundingSource')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrganizationalReviewActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('start_date', models.DateField(blank=True, help_text='The date the person began this activity.', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date the person finished this activity.', null=True)),
                ('role', models.CharField(blank=True, help_text="The person's role in this activity", max_length=100, null=True)),
                ('description', models.CharField(blank=True, help_text='Description of the services contributed by the person, in conjunction with the consideration of an application for promotion/tenure, to examine something, formulate a judgement, and a statement of that judgement.', max_length=1000, null=True)),
                ('assessment_review_activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.AssessmentAndReviewActivity')),
                ('organization', models.OneToOneField(blank=True, help_text='The organization for which the assessment was made', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Organization')),
                ('other_organization', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.OtherOrganization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='nonacademicworkexperience',
            name='organization',
            field=models.OneToOneField(blank=True, help_text='The name of the organization where the person worked', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Organization'),
        ),
        migrations.AddField(
            model_name='nonacademicworkexperience',
            name='other_organization',
            field=models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.OtherOrganization'),
        ),
        migrations.CreateModel(
            name='MusicalPerformance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('url', models.URLField(blank=True, help_text='The name of an associated website, if applicable', null=True)),
                ('role', models.CharField(blank=True, help_text="The nature of the person's role", max_length=100, null=True)),
                ('contributors_count', models.IntegerField(blank=True, help_text='The number of contributors', null=True)),
                ('contributors', models.CharField(blank=True, help_text='The names of the other contributors', max_length=200, null=True)),
                ('contribution_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('venue', models.CharField(blank=True, help_text='The venue where it was presented', max_length=50, null=True)),
                ('first_performance_date', models.DateField(blank=True, help_text='The date the piece was first presented', null=True)),
                ('artistic_contribution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ArtisticContribution')),
                ('funding_source', models.ManyToManyField(related_name='ccv_musicalperformance_related', related_query_name='ccv_musicalperformances', to='ccv.FundingSource')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MusicalCompilation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('url', models.URLField(blank=True, help_text='The name of an associated website, if applicable', null=True)),
                ('role', models.CharField(blank=True, help_text="The nature of the person's role", max_length=100, null=True)),
                ('contributors_count', models.IntegerField(blank=True, help_text='The number of contributors', null=True)),
                ('contributors', models.CharField(blank=True, help_text='The names of the other contributors', max_length=200, null=True)),
                ('contribution_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('instrumentation_tags', models.CharField(blank=True, help_text='The instrument(s) for which it is written', max_length=250, null=True)),
                ('pages_count', models.IntegerField(blank=True, help_text='The total number of pages', null=True)),
                ('duration', models.CharField(blank=True, max_length=10, null=True)),
                ('publisher', models.CharField(blank=True, help_text='The publisher of the composition', max_length=50, null=True)),
                ('publication_date', models.DateField(blank=True, help_text='The year and month the composition was published.', null=True)),
                ('publication_location', models.CharField(blank=True, help_text='The place where the composition was published', max_length=50, null=True)),
                ('artistic_contribution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ArtisticContribution')),
                ('funding_source', models.ManyToManyField(related_name='ccv_musicalcompilation_related', related_query_name='ccv_musicalcompilations', to='ccv.FundingSource')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MuseumExhibition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('url', models.URLField(blank=True, help_text='The name of an associated website, if applicable', null=True)),
                ('role', models.CharField(blank=True, help_text="The nature of the person's role", max_length=100, null=True)),
                ('contributors_count', models.IntegerField(blank=True, help_text='The number of contributors', null=True)),
                ('contributors', models.CharField(blank=True, help_text='The names of the other contributors', max_length=200, null=True)),
                ('contribution_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('venue', models.CharField(blank=True, help_text='The venue in which the exhibition was given', max_length=50, null=True)),
                ('start_date', models.DateField(blank=True, help_text='The date of the opening of the exhibition', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date of the closing of the exhibition', null=True)),
                ('catalogue_title', models.CharField(blank=True, help_text='The title of the catalogue created for the exhibition', max_length=250, null=True)),
                ('artistic_contribution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ArtisticContribution')),
                ('funding_source', models.ManyToManyField(related_name='ccv_museumexhibition_related', related_query_name='ccv_museumexhibitions', to='ccv.FundingSource')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MajorPerformanceDate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateField(blank=True, help_text='The date that performance was given', null=True)),
                ('choreography', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Choreography')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Litigation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('contribution_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('url', models.URLField(blank=True, max_length=500, null=True)),
                ('role', models.CharField(blank=True, choices=[('Co-Author', 'Co-Author'), ('Co-Editor', 'Co-Editor'), ('First Listed Author', 'First Listed Author'), ('First Listed Editor', 'First Listed Editor'), ('Last Author', 'Last Author')], help_text="The nature of the person's role", max_length=30, null=True)),
                ('contributors_count', models.IntegerField(blank=True, help_text='The number of contributors', null=True)),
                ('contribution_percentage', models.CharField(blank=True, choices=[('0-10', '0-10'), ('11-20', '11-20'), ('21-30', '21-30'), ('31-40', '31-40'), ('41-50', '41-50'), ('51-60', '51-60'), ('61-70', '61-70'), ('71-80', '71-80'), ('81-90', '81-90'), ('91-100', '91-100')], help_text='approximate percentage (%) of work you contributed towards this publication', max_length=10, null=True)),
                ('doi', models.CharField(blank=True, help_text='digital object identifier (DOI) for this publication', max_length=50, null=True)),
                ('description_of_role', models.CharField(blank=True, help_text='brief description of your contribution role towards this publication', max_length=1000, null=True)),
                ('person_acted_for', models.CharField(blank=True, help_text='The name of the person the person represented/acted for', max_length=100, null=True)),
                ('court', models.CharField(blank=True, help_text='The court in which the case was heard', max_length=250, null=True)),
                ('location', models.CharField(blank=True, help_text='The location of the court in which the case was heard', max_length=50, null=True)),
                ('year_started', models.CharField(blank=True, help_text='The year the case started', max_length=4, null=True)),
                ('end_year', models.CharField(blank=True, help_text='The year the case ended', max_length=4, null=True)),
                ('key_legal_issues', models.CharField(blank=True, help_text='A description of the key issues in the case', max_length=1000, null=True)),
                ('funding_source', models.ManyToManyField(related_name='ccv_litigation_related', related_query_name='ccv_litigations', to='ccv.FundingSource')),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Publication')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LightDesign',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('url', models.URLField(blank=True, help_text='The name of an associated website, if applicable', null=True)),
                ('role', models.CharField(blank=True, help_text="The nature of the person's role", max_length=100, null=True)),
                ('contributors_count', models.IntegerField(blank=True, help_text='The number of contributors', null=True)),
                ('contributors', models.CharField(blank=True, help_text='The names of the other contributors', max_length=200, null=True)),
                ('contribution_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('writer', models.CharField(blank=True, help_text='The writer of the show', max_length=100, null=True)),
                ('producer', models.CharField(blank=True, help_text='The producer of the show', max_length=100, null=True)),
                ('venue', models.CharField(blank=True, help_text='The venue in which the performance was given', max_length=100, null=True)),
                ('opening_date', models.DateField(blank=True, help_text='The date of the opening of the performance', null=True)),
                ('artistic_contribution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ArtisticContribution')),
                ('funding_source', models.ManyToManyField(related_name='ccv_lightdesign_related', related_query_name='ccv_lightdesigns', to='ccv.FundingSource')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='License',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, help_text='The name of the patent', max_length=250, null=True)),
                ('filing_date', models.DateField(blank=True, help_text='The year patent was issued', null=True)),
                ('date_issued', models.DateField(blank=True, help_text='The date the license was issued', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date of expiry of the license', null=True)),
                ('contribution_or_impact', models.CharField(blank=True, help_text='Provide a concise description of this contribution and its value to and impact on the area of research for which you are applying for funding', max_length=1000, null=True)),
                ('url', models.URLField(blank=True, help_text='The name of an associated website, if applicable', max_length=100, null=True)),
                ('status', models.CharField(blank=True, choices=[('Granted', 'Granted'), ('In Negotiation', 'In Negotiation')], help_text='The status of the license application', max_length=20, null=True)),
                ('funding_source', models.ManyToManyField(related_name='ccv_license_related', related_query_name='ccv_licenses', to='ccv.FundingSource')),
                ('intellectual_property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.IntellectualProperty')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LeavesOfAbsence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('leave_type', models.CharField(blank=True, choices=[('Administrative', 'Administrative'), ('Bereavement', 'Bereavement'), ('Medical', 'Medical'), ('Other Circumstances', 'Other Circumstances'), ('Parental', 'Parental'), ('Sabbatical', 'Sabbatical'), ('Special', 'Special'), ('Study', 'Study'), ('Unpaid', 'Unpaid')], help_text='The nature of the leave of absence', max_length=50, null=True)),
                ('start_date', models.DateField(blank=True, help_text='The date the leave started', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date the leave ended, if applicable', null=True)),
                ('absence_description', models.CharField(blank=True, help_text='description of the leave of absence', max_length=1000, null=True)),
                ('employment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Employment')),
                ('organization', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.Organization')),
                ('other_organization', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.OtherOrganization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LanguageSkill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('language', models.CharField(blank=True, help_text='The language in which the person is indicating a competency.', max_length=20, null=True)),
                ('can_read', models.BooleanField(default=False, help_text='The capacity of the person to comprehend the indicated language in written form.', null=True)),
                ('can_write', models.BooleanField(default=False)),
                ('can_speak', models.BooleanField(default=False)),
                ('can_understand', models.BooleanField(default=False)),
                ('peer_review', models.BooleanField(blank=True, null=True)),
                ('personal_information', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Identification')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='JournalReviewActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('start_date', models.DateField(blank=True, help_text='The date the person began this activity.', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date the person finished this activity.', null=True)),
                ('role', models.CharField(blank=True, help_text="The person's role in this activity", max_length=100, null=True)),
                ('review_type', models.CharField(blank=True, choices=[('Blind', 'Blind'), ('Double Blind', 'Double Blind'), ('Open', 'Open')], help_text='The nature of the review conducted', max_length=20, null=True)),
                ('journal', models.CharField(blank=True, help_text='The name of the journal', max_length=200, null=True)),
                ('press', models.CharField(blank=True, help_text='The name of the press', max_length=250, null=True)),
                ('works_reviewed_count', models.IntegerField(blank=True, default=0, help_text='Indicate how many works were reviewed', null=True)),
                ('assessment_review_activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.AssessmentAndReviewActivity')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Journal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('contribution_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('url', models.URLField(blank=True, max_length=500, null=True)),
                ('role', models.CharField(blank=True, choices=[('Co-Author', 'Co-Author'), ('Co-Editor', 'Co-Editor'), ('First Listed Author', 'First Listed Author'), ('First Listed Editor', 'First Listed Editor'), ('Last Author', 'Last Author')], help_text="The nature of the person's role", max_length=30, null=True)),
                ('contributors_count', models.IntegerField(blank=True, help_text='The number of contributors', null=True)),
                ('contribution_percentage', models.CharField(blank=True, choices=[('0-10', '0-10'), ('11-20', '11-20'), ('21-30', '21-30'), ('31-40', '31-40'), ('41-50', '41-50'), ('51-60', '51-60'), ('61-70', '61-70'), ('71-80', '71-80'), ('81-90', '81-90'), ('91-100', '91-100')], help_text='approximate percentage (%) of work you contributed towards this publication', max_length=10, null=True)),
                ('doi', models.CharField(blank=True, help_text='digital object identifier (DOI) for this publication', max_length=50, null=True)),
                ('description_of_role', models.CharField(blank=True, help_text='brief description of your contribution role towards this publication', max_length=1000, null=True)),
                ('authors', models.CharField(blank=True, help_text='The names of other authors', max_length=1000, null=True)),
                ('editors', models.CharField(blank=True, help_text='The names of the editors', max_length=200, null=True)),
                ('journal', models.CharField(blank=True, help_text='The name of the journal in which the article is published, or to be published', max_length=200, null=True)),
                ('volume', models.CharField(blank=True, help_text='The volume number of the journal', max_length=20, null=True)),
                ('issue', models.CharField(blank=True, help_text='The volume number of the journal', max_length=10, null=True)),
                ('page_range', models.CharField(blank=True, help_text="The page range with a dash ('-') as separator (e.g. 234-256)", max_length=20, null=True)),
                ('publisher', models.CharField(blank=True, help_text='The name of the publisher', max_length=100, null=True)),
                ('publication_location', models.CharField(blank=True, help_text='The country where it was published', max_length=50, null=True)),
                ('is_refereed', models.BooleanField(blank=True, help_text='Indicate if the journal is refereed', null=True)),
                ('is_open_access', models.BooleanField(blank=True, help_text='Indicate if the journal is open access', null=True)),
                ('is_synthesis', models.BooleanField(blank=True, help_text='contextualization and integration of research findings of individual research within the larger body of knowledge on topic', null=True)),
                ('journal_type', models.CharField(choices=[('Issue', 'Issue'), ('Article', 'Article')], help_text='This field is to indicate journal type', max_length=10)),
                ('funding_source', models.ManyToManyField(related_name='ccv_journal_related', related_query_name='ccv_journals', to='ccv.FundingSource')),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Publication')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InternationalCollaborationActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('start_date', models.DateField(blank=True, help_text='The date the person began this activity.', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date the person finished this activity.', null=True)),
                ('role', models.CharField(blank=True, help_text='The role of the person in this activity', max_length=50, null=True)),
                ('location', models.CharField(blank=True, help_text='The principal country with which the person collaborated', max_length=30, null=True)),
                ('description', models.TextField(blank=True, max_length=1000, null=True)),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Activity')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GraduationExaminationActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('start_date', models.DateField(blank=True, help_text='The date the person began this activity.', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date the person finished this activity.', null=True)),
                ('role', models.CharField(blank=True, choices=[('Candidacy Committee Chair', 'Candidacy Committee Chair'), ('Candidacy Committee Member', 'Candidacy Committee Member'), ('Capping Project Evaluator', 'Capping Project Evaluator'), ('Chair', 'Chair'), ('Committee Member', 'Committee Member'), ('Examiner', 'Examiner'), ("Master's Oral Exam Chair", "Master's Oral Exam Chair"), ("Master's Oral Exam Member", "Master's Oral Exam Member"), ("Master's Proposal Defense Chair", "Master's Proposal Defense Chair"), ("Master's Proposal Defense Member", "Master's Proposal Defense Member"), ('PhD Comprehensive Exam Committee Member', 'PhD Comprehensive Exam Committee Member'), ('PhD External Examiner', 'PhD External Examiner'), ('PhD External Reader', 'PhD External Reader'), ('PhD Oral Exam Chair', 'PhD Oral Exam Chair'), ('PhD Oral Exam Member', 'PhD Oral Exam Member'), ('Thesis Defense Chair', 'Thesis Defense Chair'), ('Thesis Defense Examiner', 'Thesis Defense Examiner')], help_text="The person's role in this activity", max_length=50, null=True)),
                ('department', models.CharField(blank=True, help_text='The department within the given institution', max_length=100, null=True)),
                ('student_name', models.CharField(blank=True, help_text='The family and first name of the student', max_length=100, null=True)),
                ('assessment_review_activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.AssessmentAndReviewActivity')),
                ('organization', models.OneToOneField(blank=True, help_text='The institution for which the examination was conducted.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Organization')),
                ('other_organization', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.OtherOrganization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GeographicalRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('region', models.CharField(blank=True, choices=[('Africa', 'Africa'), ('Antarctic and Arctic', 'Antarctic and Arctic'), ('Asia', 'Asia'), ('Atlantic Provinces', 'Atlantic Provinces'), ('Caribbean', 'Caribbean'), ('Central Africa', 'Central Africa'), ('Central America', 'Central America'), ('Central Asia', 'Central Asia'), ('Central Canada', 'Central Canada'), ('East Asia', 'East Asia'), ('Eastern Africa', 'Eastern Africa'), ('Eastern Europe', 'Eastern Europe'), ('Europe', 'Europe'), ('Former Soviet Union', 'Former Soviet Union'), ('International', 'International'), ('Melanesia', 'Melanesia'), ('Micronesia', 'Micronesia'), ('Near and Middle East', 'Near and Middle East'), ('North America', 'North America'), ('Northern Africa', 'Northern Africa'), ('Northern Canada', 'Northern Canada'), ('Not subject to geographical classification', 'Not subject to geographical classification'), ('Oceania', 'Oceania'), ('Polynesia', 'Polynesia'), ('Scandinavia', 'Scandinavia'), ('South America', 'South America'), ('South Asia', 'South Asia'), ('Southeast Asia', 'Southeast Asia'), ('Southern Africa', 'Southern Africa'), ('Southwest Asia', 'Southwest Asia'), ('Western Africa', 'Western Africa'), ('Western Canada', 'Western Canada'), ('Western Europe', 'Western Europe')], max_length=50, null=True)),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.UserProfile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='fundingsource',
            name='research_funding_history',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ResearchFundingHistory'),
        ),
        migrations.CreateModel(
            name='FundingByYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('start_date', models.DateField(blank=True, help_text='Breakdown of the total funding received from one or more organizations for this project, by year.', null=True)),
                ('end_date', models.DateField(blank=True, help_text='Breakdown of the total funding received from one or more organizations for this project, by year.', null=True)),
                ('total_funding_in_canadian_dollar', models.IntegerField(blank=True, help_text='The total amount that was received for this period for this project in CAN $', null=True)),
                ('total_funding', models.IntegerField(blank=True, help_text='The total amount that was received for this period for this project', null=True)),
                ('total_funding_currency', models.CharField(blank=True, help_text='The currency in which the money was awarded', max_length=20, null=True)),
                ('funding_received', models.IntegerField(blank=True, help_text='The amount that you received for this period for this project', null=True)),
                ('funding_received_in_canadian_dollar', models.IntegerField(blank=True, help_text='The amount that you received for this period for this project CAN $', null=True)),
                ('funding_received_currency', models.CharField(blank=True, help_text='The currency in which the money was awarded', max_length=20, null=True)),
                ('time_commitment', models.IntegerField(blank=True, help_text='approximate percentage of regular working hours over this time period that were spent on this project', null=True)),
                ('research_funding_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ResearchFundingHistory')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FieldOfApplication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('field', models.CharField(blank=True, max_length=50, null=True)),
                ('subfield', models.CharField(blank=True, max_length=50, null=True)),
                ('academic_work_experience', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.AcademicWorkExperience')),
                ('credential', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.Credential')),
                ('degree', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.Degree')),
                ('non_academic_work_experience', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.NonAcademicWorkExperience')),
                ('recognition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.Recognition')),
                ('research_funding_assessment_activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ResearchFundingApplicationAssessmentActivity')),
                ('research_funding_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ResearchFundingHistory')),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.UserProfile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Fiction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('url', models.URLField(blank=True, help_text='The name of an associated website, if applicable', null=True)),
                ('role', models.CharField(blank=True, help_text="The nature of the person's role", max_length=100, null=True)),
                ('contributors_count', models.IntegerField(blank=True, help_text='The number of contributors', null=True)),
                ('contributors', models.CharField(blank=True, help_text='The names of the other contributors', max_length=200, null=True)),
                ('contribution_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('appeared_in', models.CharField(blank=True, help_text='The name of the publication in which the work appeared', max_length=100, null=True)),
                ('volume', models.CharField(blank=True, help_text='The volume number of the fiction', max_length=20, null=True)),
                ('issue', models.CharField(blank=True, help_text='The volume number of the fiction', max_length=10, null=True)),
                ('page_range', models.CharField(blank=True, help_text="The page range with a dash ('-') as separator (e.g. 234-256)", max_length=20, null=True)),
                ('publication_date', models.DateField(blank=True, help_text='The date script was completed', null=True)),
                ('publisher', models.CharField(blank=True, help_text='The name of the publisher', max_length=100, null=True)),
                ('publication_location', models.CharField(blank=True, help_text='The country of publication', max_length=50, null=True)),
                ('authors', models.CharField(blank=True, help_text='The names of other authors of the function', max_length=200, null=True)),
                ('editors', models.CharField(blank=True, help_text='The names of the editors', max_length=200, null=True)),
                ('artistic_contribution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ArtisticContribution')),
                ('funding_source', models.ManyToManyField(related_name='ccv_fiction_related', related_query_name='ccv_fictions', to='ccv.FundingSource')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExhibitionCatalogue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('url', models.URLField(blank=True, help_text='The name of an associated website, if applicable', null=True)),
                ('role', models.CharField(blank=True, help_text="The nature of the person's role", max_length=100, null=True)),
                ('contributors_count', models.IntegerField(blank=True, help_text='The number of contributors', null=True)),
                ('contributors', models.CharField(blank=True, help_text='The names of the other contributors', max_length=200, null=True)),
                ('contribution_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('gallery_publisher', models.CharField(blank=True, help_text='The name of the gallery or publisher for which the catalogue was created', max_length=50, null=True)),
                ('publication_date', models.DateField(blank=True, help_text='The year and month the catalogue was published.', null=True)),
                ('publication_location', models.CharField(blank=True, help_text='The place where the catalogue was published', max_length=50, null=True)),
                ('publication_city', models.CharField(blank=True, help_text='City where the publication was published', max_length=50, null=True)),
                ('pages_count', models.IntegerField(blank=True, help_text='The total number of pages', null=True)),
                ('artists', models.CharField(blank=True, help_text='The names of the artists presented in the catalogue', max_length=250, null=True)),
                ('artistic_contribution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ArtisticContribution')),
                ('funding_source', models.ManyToManyField(related_name='ccv_exhibitioncatalogue_related', related_query_name='ccv_exhibitioncatalogues', to='ccv.FundingSource')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('role', models.CharField(blank=True, help_text='The role of the person in this activity', max_length=100, null=True)),
                ('type', models.CharField(blank=True, choices=[('Association', 'Association'), ('Club', 'Club'), ('Conference', 'Conference'), ('Course', 'Course'), ('Seminar', 'Seminar'), ('Workshop', 'Workshop')], help_text='The nature of the event', max_length=20, null=True)),
                ('name', models.CharField(blank=True, help_text='The title or name of the event', max_length=250, null=True)),
                ('start_date', models.DateField(blank=True, help_text='The date the person started the activity', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date the person completed this activity', null=True)),
                ('event_start_date', models.DateField(blank=True, help_text='The date the event started', null=True)),
                ('event_end_date', models.DateField(blank=True, help_text='The date the event ended', null=True)),
                ('description', models.CharField(blank=True, help_text='Description of the services the person contributed in taking part in an event', max_length=1000, null=True)),
                ('participation_activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ParticipationActivity')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Email',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(blank=True, choices=[('Personal', 'Personal'), ('Temporary', 'Temporary'), ('Work', 'Work')], help_text='The nature of the given e-mail', max_length=10, null=True)),
                ('address', models.CharField(blank=True, help_text="The person's e-mail address", max_length=100, null=True)),
                ('start_date', models.DateField(blank=True, help_text='If the given e-mail is temporary, the date upon which it becomes active', null=True)),
                ('end_date', models.DateField(blank=True, help_text='If the given e-mail is temporary, the date upon which it becomes inactive', null=True)),
                ('personal_information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Identification')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ccv', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ccv.CanadianCommonCv')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Disclosure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, help_text='The name of the patent', max_length=250, null=True)),
                ('filing_date', models.DateField(blank=True, help_text='The year patent was issued', null=True)),
                ('date_issued', models.DateField(blank=True, help_text='The date the license was issued', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date of expiry of the license', null=True)),
                ('contribution_or_impact', models.CharField(blank=True, help_text='Provide a concise description of this contribution and its value to and impact on the area of research for which you are applying for funding', max_length=1000, null=True)),
                ('url', models.URLField(blank=True, help_text='The name of an associated website, if applicable', max_length=100, null=True)),
                ('status', models.CharField(blank=True, help_text='Status of the disclosure application', max_length=20, null=True)),
                ('funding_source', models.ManyToManyField(related_name='ccv_disclosure_related', related_query_name='ccv_disclosures', to='ccv.FundingSource')),
                ('intellectual_property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.IntellectualProperty')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DisciplineTrainedIn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('discipline', models.CharField(blank=True, max_length=50, null=True)),
                ('sector', models.CharField(blank=True, choices=[('Arts and literature', 'Arts and literature'), ('Health Sciences', 'Health Sciences'), ('Human and social sciences', 'Human and social sciences'), ('Natural Sciences and Engineering', 'Natural Sciences and Engineering')], max_length=50, null=True)),
                ('fields', models.CharField(blank=True, choices=[('Applied Sciences', 'Applied Sciences'), ('Arts and Literature Studies', 'Arts and Literature Studies'), ('Education', 'Education'), ('Engineering', 'Engineering'), ('Humanities', 'Humanities'), ('Management', 'Management'), ('Mathematical Sciences', 'Mathematical Sciences'), ('Medical Sciences', 'Medical Sciences'), ('Natural Sciences', 'Natural Sciences'), ('Nursing', 'Nursing'), ('Physical Education and Rehabilitation', 'Physical Education and Rehabilitation'), ('Social Sciences', 'Social Sciences'), ('Writing and Fine Arts', 'Writing and Fine Arts')], max_length=50, null=True)),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.UserProfile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DictionaryEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('contribution_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('url', models.URLField(blank=True, max_length=500, null=True)),
                ('role', models.CharField(blank=True, choices=[('Co-Author', 'Co-Author'), ('Co-Editor', 'Co-Editor'), ('First Listed Author', 'First Listed Author'), ('First Listed Editor', 'First Listed Editor'), ('Last Author', 'Last Author')], help_text="The nature of the person's role", max_length=30, null=True)),
                ('contributors_count', models.IntegerField(blank=True, help_text='The number of contributors', null=True)),
                ('contribution_percentage', models.CharField(blank=True, choices=[('0-10', '0-10'), ('11-20', '11-20'), ('21-30', '21-30'), ('31-40', '31-40'), ('41-50', '41-50'), ('51-60', '51-60'), ('61-70', '61-70'), ('71-80', '71-80'), ('81-90', '81-90'), ('91-100', '91-100')], help_text='approximate percentage (%) of work you contributed towards this publication', max_length=10, null=True)),
                ('doi', models.CharField(blank=True, help_text='digital object identifier (DOI) for this publication', max_length=50, null=True)),
                ('description_of_role', models.CharField(blank=True, help_text='brief description of your contribution role towards this publication', max_length=1000, null=True)),
                ('authors', models.CharField(blank=True, help_text='The names of other authors', max_length=1000, null=True)),
                ('editors', models.CharField(blank=True, help_text='The names of the editors', max_length=200, null=True)),
                ('name', models.CharField(blank=True, max_length=250, null=True)),
                ('edition', models.CharField(blank=True, help_text='The edition in which it was published', max_length=50, null=True)),
                ('volume', models.CharField(blank=True, help_text='The volume in which it was published', max_length=20, null=True)),
                ('volumes_count', models.IntegerField(blank=True, help_text='The total number of volumes contained in the dictionary', null=True)),
                ('page_range', models.IntegerField(blank=True, help_text="The page range with a dash ('-') as separator (e.g. 234-256)", null=True)),
                ('year', models.CharField(blank=True, help_text='The year relative to the Publishing Status', max_length=4, null=True)),
                ('publisher', models.CharField(blank=True, max_length=100, null=True)),
                ('location', models.CharField(blank=True, help_text='The country of the publication', max_length=50, null=True)),
                ('city', models.CharField(blank=True, max_length=50, null=True)),
                ('funding_source', models.ManyToManyField(related_name='ccv_dictionaryentry_related', related_query_name='ccv_dictionaryentrys', to='ccv.FundingSource')),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Publication')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='degree',
            name='education',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Education'),
        ),
        migrations.AddField(
            model_name='degree',
            name='organization',
            field=models.OneToOneField(blank=True, help_text='The institution that conferred the degree.', null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.Organization'),
        ),
        migrations.AddField(
            model_name='degree',
            name='other_organization',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.OtherOrganization'),
        ),
        migrations.AddField(
            model_name='credential',
            name='education',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Education'),
        ),
        migrations.AddField(
            model_name='credential',
            name='organization',
            field=models.OneToOneField(blank=True, help_text='The organization that conferred this credential', null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.Organization'),
        ),
        migrations.AddField(
            model_name='credential',
            name='other_organization',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.OtherOrganization'),
        ),
        migrations.CreateModel(
            name='CourseTaught',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('role', models.CharField(blank=True, help_text='The role of the person in this activity', max_length=100, null=True)),
                ('department', models.CharField(blank=True, help_text='The department within the given institution', max_length=100, null=True)),
                ('academic_session', models.CharField(blank=True, choices=[('Fall', 'Fall'), ('Spring', 'Spring'), ('Summer', 'Summer'), ('Winter', 'Winter')], help_text='The academic session in which this course was taught', max_length=20, null=True)),
                ('code', models.CharField(blank=True, help_text="The institution's course code", max_length=25, null=True)),
                ('title', models.TextField(blank=True, help_text='The course title', max_length=250, null=True)),
                ('topic', models.CharField(blank=True, help_text='The topic of the course', max_length=100, null=True)),
                ('level', models.CharField(blank=True, choices=[('College', 'College'), ('Graduate', 'Graduate'), ('Post Graduate', 'Post Graduate'), ('Undergraduate', 'Undergraduate')], max_length=20, null=True)),
                ('section', models.TextField(blank=True, help_text='The area of study in which the course falls.', max_length=250, null=True)),
                ('students_count', models.IntegerField(blank=True, help_text='The number of students who attend this course during a session', null=True)),
                ('credits_count', models.IntegerField(blank=True, help_text='Institution’s credit value for the course', null=True)),
                ('start_date', models.DateField(blank=True, help_text='The date the person began teaching this course.', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date the person finished teaching this course.', null=True)),
                ('lecture_hours_per_week', models.IntegerField(blank=True, help_text='The number of hours of lecture the person contributed per week', null=True)),
                ('tutorial_hours_per_week', models.IntegerField(blank=True, help_text='The number of hours of tutorial the person contributed per week.', null=True)),
                ('lab_hours_per_week', models.IntegerField(blank=True, help_text='The number of hours of laboratory instruction the person contributed per week.', null=True)),
                ('guest_lecture', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Indicate whether you were a guest lecturer for this course', max_length=5, null=True)),
                ('organization', models.OneToOneField(blank=True, help_text='The organization where the course was taught ', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Organization')),
                ('other_organization', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.OtherOrganization')),
                ('teaching_activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.TeachingActivity')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CourseDevelopment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('teaching_activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.TeachingActivity')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CountryOfCitizenship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, help_text='List all countries that the person is a citizen of', max_length=50, null=True)),
                ('identification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Identification')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ConferenceReviewActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('start_date', models.DateField(blank=True, help_text='The date the person began this activity.', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date the person finished this activity.', null=True)),
                ('role', models.CharField(blank=True, help_text="The person's role in this activity", max_length=100, null=True)),
                ('review_type', models.CharField(blank=True, choices=[('Blind', 'Blind'), ('Double Blind', 'Double Blind'), ('Open', 'Open')], help_text='The nature of the review conducted', max_length=20, null=True)),
                ('conference', models.CharField(blank=True, help_text='The name of the conference', max_length=250, null=True)),
                ('conference_host', models.CharField(blank=True, help_text='The organization hosting the conference', max_length=250, null=True)),
                ('works_referred_count', models.IntegerField(blank=True, default=0, help_text='Indicate how many works were reviewed', null=True)),
                ('assessment_review_activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.AssessmentAndReviewActivity')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CommunityAndVolunteerActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('start_date', models.DateField(blank=True, help_text='The date the person began this activity.', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date the person finished this activity.', null=True)),
                ('role', models.CharField(blank=True, help_text='The role of the person in this activity', max_length=100, null=True)),
                ('description', models.CharField(blank=True, help_text='Description of the unpaid services', max_length=1000, null=True)),
                ('organization', models.OneToOneField(blank=True, help_text='The name of the organization for which the service was undertaken', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Organization')),
                ('other_organization', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.OtherOrganization')),
                ('participation_activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ParticipationActivity')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CommitteeMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('role', models.CharField(blank=True, choices=[('Chair', 'Chair'), ('Co-chair', 'Co-chair'), ('Committee Member', 'Committee Member'), ('Ex-Officio', 'Ex-Officio'), ('Group Chair', 'Group Chair')], help_text="The person's role in this activity", max_length=20, null=True)),
                ('name', models.CharField(blank=True, help_text='The name of the committee', max_length=250, null=True)),
                ('start_date', models.DateField(blank=True, help_text='The date on which membership began', null=True)),
                ('description', models.CharField(blank=True, help_text='Description of services contributed by the person as part of a committee', max_length=1000, null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date on which membership ended, if applicable', null=True)),
                ('membership', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Membership')),
                ('organization', models.OneToOneField(blank=True, help_text='The name of the organisation of which the person is a member', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Organization')),
                ('other_organization', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.OtherOrganization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CoInstructor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('family_name', models.CharField(blank=True, help_text='The family name of the instructor', max_length=50, null=True)),
                ('first_name', models.CharField(blank=True, help_text='The first name of the instructor', max_length=50, null=True)),
                ('course_taught', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.CourseTaught')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CoDeveloper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('family_name', models.CharField(blank=True, help_text='Family name of person who participated in the development of the course', max_length=50, null=True)),
                ('first_name', models.CharField(blank=True, help_text='First name of person who participated in the development of the course', max_length=50, null=True)),
                ('course_development', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.CourseDevelopment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ClinicalCareGuideline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('contribution_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('url', models.URLField(blank=True, max_length=500, null=True)),
                ('role', models.CharField(blank=True, choices=[('Co-Author', 'Co-Author'), ('Co-Editor', 'Co-Editor'), ('First Listed Author', 'First Listed Author'), ('First Listed Editor', 'First Listed Editor'), ('Last Author', 'Last Author')], help_text="The nature of the person's role", max_length=30, null=True)),
                ('contributors_count', models.IntegerField(blank=True, help_text='The number of contributors', null=True)),
                ('contribution_percentage', models.CharField(blank=True, choices=[('0-10', '0-10'), ('11-20', '11-20'), ('21-30', '21-30'), ('31-40', '31-40'), ('41-50', '41-50'), ('51-60', '51-60'), ('61-70', '61-70'), ('71-80', '71-80'), ('81-90', '81-90'), ('91-100', '91-100')], help_text='approximate percentage (%) of work you contributed towards this publication', max_length=10, null=True)),
                ('doi', models.CharField(blank=True, help_text='digital object identifier (DOI) for this publication', max_length=50, null=True)),
                ('description_of_role', models.CharField(blank=True, help_text='brief description of your contribution role towards this publication', max_length=1000, null=True)),
                ('year_released', models.CharField(blank=True, help_text='The year the guideline was first released', max_length=4, null=True)),
                ('contributors', models.CharField(blank=True, help_text='The names of the other contributors', max_length=200, null=True)),
                ('funding_source', models.ManyToManyField(related_name='ccv_clinicalcareguideline_related', related_query_name='ccv_clinicalcareguidelines', to='ccv.FundingSource')),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Publication')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='choreography',
            name='funding_source',
            field=models.ManyToManyField(related_name='ccv_choreography_related', related_query_name='ccv_choreographys', to='ccv.FundingSource'),
        ),
        migrations.CreateModel(
            name='BroadcastInterview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('topic', models.CharField(blank=True, help_text='The subject of the interview', max_length=250, null=True)),
                ('interviewer', models.CharField(blank=True, help_text="The interviewers' names", max_length=100, null=True)),
                ('description', models.CharField(blank=True, help_text='description of this contribution and its value to the area of research', max_length=1000, null=True)),
                ('url', models.URLField(blank=True, help_text='The name of an associated website, if applicable', max_length=100, null=True)),
                ('program', models.CharField(blank=True, max_length=250, null=True)),
                ('network', models.CharField(blank=True, max_length=250, null=True)),
                ('first_broadcast_date', models.DateField(blank=True, help_text='The date on which the interview was first aired', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date on which the broadcast of the interview ended', null=True)),
                ('contribution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Contribution')),
                ('funding_source', models.ManyToManyField(related_name='ccv_broadcastinterview_related', related_query_name='ccv_broadcastinterviews', to='ccv.FundingSource')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Broadcast',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateField(blank=True, help_text='The date of broadcast of the program', null=True)),
                ('network_name', models.CharField(blank=True, help_text='The network on which the program was broadcasted', max_length=50, null=True)),
                ('radio_and_tv_program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.RadioAndTvProgram')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BookReview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('contribution_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('url', models.URLField(blank=True, max_length=500, null=True)),
                ('role', models.CharField(blank=True, choices=[('Co-Author', 'Co-Author'), ('Co-Editor', 'Co-Editor'), ('First Listed Author', 'First Listed Author'), ('First Listed Editor', 'First Listed Editor'), ('Last Author', 'Last Author')], help_text="The nature of the person's role", max_length=30, null=True)),
                ('contributors_count', models.IntegerField(blank=True, help_text='The number of contributors', null=True)),
                ('contribution_percentage', models.CharField(blank=True, choices=[('0-10', '0-10'), ('11-20', '11-20'), ('21-30', '21-30'), ('31-40', '31-40'), ('41-50', '41-50'), ('51-60', '51-60'), ('61-70', '61-70'), ('71-80', '71-80'), ('81-90', '81-90'), ('91-100', '91-100')], help_text='approximate percentage (%) of work you contributed towards this publication', max_length=10, null=True)),
                ('doi', models.CharField(blank=True, help_text='digital object identifier (DOI) for this publication', max_length=50, null=True)),
                ('description_of_role', models.CharField(blank=True, help_text='brief description of your contribution role towards this publication', max_length=1000, null=True)),
                ('review_year', models.CharField(blank=True, help_text='The year the review was published', max_length=4, null=True)),
                ('reviewed_title', models.CharField(blank=True, help_text='The title of the book that was reviewed', max_length=250, null=True)),
                ('reviewed_edition', models.CharField(blank=True, help_text='The edition of the book that was reviewed', max_length=50, null=True)),
                ('reviewed_volume', models.CharField(blank=True, help_text='The publication Year of the book that was reviewed', max_length=20, null=True)),
                ('reviewed_publication_year', models.CharField(blank=True, help_text='The publication Year of the book that was reviewed', max_length=4, null=True)),
                ('reviewed_author', models.CharField(blank=True, max_length=1000, null=True)),
                ('is_refereed', models.BooleanField(blank=True, help_text='Indicate if the project was refereed', null=True)),
                ('funding_source', models.ManyToManyField(related_name='ccv_bookreview_related', related_query_name='ccv_bookreviews', to='ccv.FundingSource')),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Publication')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AudioRecording',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('url', models.URLField(blank=True, help_text='The name of an associated website, if applicable', null=True)),
                ('role', models.CharField(blank=True, help_text="The nature of the person's role", max_length=100, null=True)),
                ('contributors_count', models.IntegerField(blank=True, help_text='The number of contributors', null=True)),
                ('contributors', models.CharField(blank=True, help_text='The names of the other contributors', max_length=200, null=True)),
                ('contribution_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('album_title', models.CharField(blank=True, help_text='The title of the album on which it is recorded', max_length=250, null=True)),
                ('producer', models.CharField(blank=True, help_text="The producer's name", max_length=50, null=True)),
                ('distributor', models.CharField(blank=True, help_text='The name of the distributor of the album', max_length=50, null=True)),
                ('release_date', models.DateField(blank=True, help_text='The date of initial release of the recording', null=True)),
                ('artistic_contribution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ArtisticContribution')),
                ('funding_source', models.ManyToManyField(related_name='ccv_audiorecording_related', related_query_name='ccv_audiorecordings', to='ccv.FundingSource')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ArtisticExhibition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=250, null=True)),
                ('url', models.URLField(blank=True, help_text='The name of an associated website, if applicable', null=True)),
                ('role', models.CharField(blank=True, help_text="The nature of the person's role", max_length=100, null=True)),
                ('contributors_count', models.IntegerField(blank=True, help_text='The number of contributors', null=True)),
                ('contributors', models.CharField(blank=True, help_text='The names of the other contributors', max_length=200, null=True)),
                ('contribution_value', models.CharField(blank=True, max_length=1000, null=True)),
                ('venue', models.CharField(blank=True, help_text='The venue where it was presented', max_length=50, null=True)),
                ('first_performance_date', models.DateField(blank=True, help_text='The date the piece was first presented', null=True)),
                ('artistic_contribution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ArtisticContribution')),
                ('funding_source', models.ManyToManyField(related_name='ccv_artisticexhibition_related', related_query_name='ccv_artisticexhibitions', to='ccv.FundingSource')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='artisticcontribution',
            name='contribution',
            field=models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Contribution'),
        ),
        migrations.CreateModel(
            name='AreaOfResearch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('area', models.CharField(blank=True, max_length=50, null=True)),
                ('sector', models.CharField(blank=True, max_length=50, null=True)),
                ('field', models.CharField(blank=True, max_length=50, null=True)),
                ('subfield', models.CharField(blank=True, max_length=50, null=True)),
                ('academic_work_experience', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.AcademicWorkExperience')),
                ('credential', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.Credential')),
                ('degree', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.Degree')),
                ('non_academic_work_experience', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.NonAcademicWorkExperience')),
                ('recognition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.Recognition')),
                ('research_funding_assessment_activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ResearchFundingApplicationAssessmentActivity')),
                ('research_funding_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ResearchFundingHistory')),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.UserProfile')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Affiliation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('position_title', models.CharField(blank=True, help_text='The name or title of the position', max_length=250, null=True)),
                ('department', models.CharField(blank=True, help_text='The department within the given organization', max_length=100, null=True)),
                ('activity_description', models.CharField(blank=True, help_text="A description of the person's activities with this organization", max_length=1000, null=True)),
                ('start_date', models.DateField(blank=True, help_text='The date when the persone became affiliated with this organization', null=True)),
                ('end_date', models.DateField(blank=True, help_text="The date when the person's affiliation with this organization ended", null=True)),
                ('employment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Employment')),
                ('organization', models.OneToOneField(blank=True, help_text='The organization with which the person is affiliated.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Organization')),
                ('other_organization', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.OtherOrganization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(blank=True, choices=[('Courier', 'Courier'), ('Home', 'Home'), ('Mailing', 'Mailing'), ('Primary Affiliation', 'Primary Affiliation'), ('Temporary', 'Temporary')], help_text='The nature and intended use of the given address', max_length=20, null=True)),
                ('line_1', models.CharField(blank=True, help_text='The exact location, number and street name for the given address', max_length=50, null=True)),
                ('line_2', models.CharField(blank=True, max_length=50, null=True)),
                ('line_3', models.CharField(blank=True, max_length=50, null=True)),
                ('line_4', models.CharField(blank=True, max_length=50, null=True)),
                ('line_5', models.CharField(blank=True, max_length=50, null=True)),
                ('city', models.CharField(blank=True, help_text='The municipal component (city, town, etc.) of the given address', max_length=50, null=True)),
                ('country', models.CharField(blank=True, max_length=50, null=True)),
                ('subdivision', models.CharField(blank=True, max_length=50, null=True)),
                ('postal', models.CharField(blank=True, help_text='The postal code of the given address', max_length=10, null=True)),
                ('start_date', models.DateField(blank=True, help_text='If the given address is temporary, the date upon which it becomes active', null=True)),
                ('end_date', models.DateField(blank=True, help_text='If the given address is temporary, the date upon which it becomes inactive', null=True)),
                ('personal_information', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Identification')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='activity',
            name='ccv',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ccv.CanadianCommonCv'),
        ),
        migrations.AddField(
            model_name='academicworkexperience',
            name='employment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Employment'),
        ),
        migrations.AddField(
            model_name='academicworkexperience',
            name='organization',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.Organization'),
        ),
        migrations.AddField(
            model_name='academicworkexperience',
            name='other_organization',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.OtherOrganization'),
        ),
        migrations.CreateModel(
            name='Translation',
            fields=[
                ('publicationstaticabstract_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ccv.PublicationStaticAbstract')),
                ('published_in', models.CharField(blank=True, help_text='The publication in which the translation was published', max_length=100, null=True)),
                ('publication_city', models.CharField(blank=True, help_text='City where the publication was published', max_length=50, null=True)),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Publication')),
            ],
            options={
                'abstract': False,
            },
            bases=('ccv.publicationstaticabstract',),
        ),
        migrations.CreateModel(
            name='SupervisedStudentPublication',
            fields=[
                ('publicationstaticabstract_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ccv.PublicationStaticAbstract')),
                ('student', models.CharField(blank=True, help_text='name of student who was supervised', max_length=100, null=True)),
                ('published_in', models.CharField(blank=True, help_text='Name of the journal in which article is published, or to be published', max_length=100, null=True)),
                ('student_contribution', models.IntegerField(blank=True, help_text='Indicate the approximate contribution of the student towards this publication', null=True)),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Publication')),
            ],
            options={
                'abstract': False,
            },
            bases=('ccv.publicationstaticabstract',),
        ),
        migrations.CreateModel(
            name='OnlineResource',
            fields=[
                ('publicationstaticabstract_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ccv.PublicationStaticAbstract')),
                ('authors', models.CharField(blank=True, help_text='The names of other authors', max_length=1000, null=True)),
                ('editors', models.CharField(blank=True, help_text='The names of the editors', max_length=200, null=True)),
                ('year_posted', models.CharField(blank=True, help_text='The year that it was posted online', max_length=4, null=True)),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Publication')),
            ],
            options={
                'abstract': False,
            },
            bases=('ccv.publicationstaticabstract', models.Model),
        ),
        migrations.CreateModel(
            name='NewspaperArticle',
            fields=[
                ('publicationstaticabstract_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ccv.PublicationStaticAbstract')),
                ('authors', models.CharField(blank=True, help_text='The names of other authors', max_length=1000, null=True)),
                ('editors', models.CharField(blank=True, help_text='The names of the editors', max_length=200, null=True)),
                ('newspaper', models.CharField(blank=True, help_text='The name of the newspaper in which it was published', max_length=250, null=True)),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Publication')),
            ],
            options={
                'abstract': False,
            },
            bases=('ccv.publicationstaticabstract', models.Model),
        ),
        migrations.CreateModel(
            name='Manual',
            fields=[
                ('publicationstaticabstract_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ccv.PublicationStaticAbstract')),
                ('authors', models.CharField(blank=True, help_text='The names of other authors', max_length=1000, null=True)),
                ('editors', models.CharField(blank=True, help_text='The names of the editors', max_length=200, null=True)),
                ('published_in', models.CharField(blank=True, help_text='The publication in which the manual was published', max_length=100, null=True)),
                ('edition', models.CharField(blank=True, help_text='The edition in which it was published', max_length=50, null=True)),
                ('volume', models.CharField(blank=True, help_text='The volume in which it was published', max_length=20, null=True)),
                ('volumes_count', models.IntegerField(blank=True, help_text='The total number of volumes contained in the manual', null=True)),
                ('pages_count', models.IntegerField(blank=True, help_text='The total number of pages in the manual', null=True)),
                ('publication_city', models.CharField(blank=True, help_text='City where the publication was published', max_length=50, null=True)),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Publication')),
            ],
            options={
                'abstract': False,
            },
            bases=('ccv.publicationstaticabstract', models.Model),
        ),
        migrations.CreateModel(
            name='MagazineEntry',
            fields=[
                ('publicationstaticabstract_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ccv.PublicationStaticAbstract')),
                ('authors', models.CharField(blank=True, help_text='The names of other authors', max_length=1000, null=True)),
                ('editors', models.CharField(blank=True, help_text='The names of the editors', max_length=200, null=True)),
                ('name', models.CharField(blank=True, help_text='The name of the magazine in which it was published', max_length=250, null=True)),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Publication')),
            ],
            options={
                'abstract': False,
            },
            bases=('ccv.publicationstaticabstract', models.Model),
        ),
        migrations.CreateModel(
            name='EncyclopediaEntry',
            fields=[
                ('publicationstaticabstract_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ccv.PublicationStaticAbstract')),
                ('authors', models.CharField(blank=True, help_text='The names of other authors', max_length=1000, null=True)),
                ('editors', models.CharField(blank=True, help_text='The names of the editors', max_length=200, null=True)),
                ('name', models.CharField(blank=True, max_length=250, null=True)),
                ('publication_city', models.CharField(blank=True, help_text='City where the publication was published', max_length=50, null=True)),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Publication')),
            ],
            options={
                'abstract': False,
            },
            bases=('ccv.publicationstaticabstract', models.Model),
        ),
        migrations.CreateModel(
            name='ConferencePublication',
            fields=[
                ('publicationstaticabstract_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ccv.PublicationStaticAbstract')),
                ('authors', models.CharField(blank=True, help_text='The names of other authors', max_length=1000, null=True)),
                ('editors', models.CharField(blank=True, help_text='The names of the editors', max_length=200, null=True)),
                ('type', models.CharField(blank=True, choices=[('Abstract', 'Abstract'), ('Paper', 'Paper'), ('Poster', 'Poster')], help_text='The nature of the conference publication', max_length=10, null=True)),
                ('name', models.CharField(blank=True, help_text='The name of the conference for which the document was written', max_length=250, null=True)),
                ('conference_location', models.CharField(blank=True, help_text='The country where the conference was held.', max_length=50, null=True)),
                ('city', models.CharField(blank=True, help_text='The city where the conference was held', max_length=100, null=True)),
                ('date', models.DateField(blank=True, help_text='The date the conference began', null=True)),
                ('published_in', models.CharField(blank=True, help_text='The title of the proceedings publication', max_length=100, null=True)),
                ('page_range', models.CharField(blank=True, max_length=20, null=True)),
                ('is_refereed', models.BooleanField(blank=True, help_text='Indicate whether the document was refereed', null=True)),
                ('is_invited', models.BooleanField(blank=True, help_text='Indicate whether the author was invited to present at the conference', null=True)),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Publication')),
            ],
            options={
                'abstract': False,
            },
            bases=('ccv.publicationstaticabstract', models.Model),
        ),
        migrations.CreateModel(
            name='BookChapter',
            fields=[
                ('publicationstaticabstract_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ccv.PublicationStaticAbstract')),
                ('authors', models.CharField(blank=True, help_text='The names of other authors', max_length=1000, null=True)),
                ('editors', models.CharField(blank=True, help_text='The names of the editors', max_length=200, null=True)),
                ('book_title', models.CharField(blank=True, help_text='The title of the book', max_length=250, null=True)),
                ('publication_city', models.CharField(blank=True, help_text='City where the publication was published', max_length=50, null=True)),
                ('is_refereed', models.BooleanField(blank=True, help_text='Indicate if the project was refereed', null=True)),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Publication')),
            ],
            options={
                'abstract': False,
            },
            bases=('ccv.publicationstaticabstract', models.Model),
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('publicationstaticabstract_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ccv.PublicationStaticAbstract')),
                ('authors', models.CharField(blank=True, help_text='The names of other authors', max_length=1000, null=True)),
                ('editors', models.CharField(blank=True, help_text='The names of the editors', max_length=200, null=True)),
                ('publication_city', models.CharField(blank=True, help_text='City where the publication was published', max_length=50, null=True)),
                ('is_refereed', models.BooleanField(blank=True, help_text='Indicate if the project was refereed', null=True)),
                ('publication', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Publication')),
            ],
            options={
                'abstract': False,
            },
            bases=('ccv.publicationstaticabstract', models.Model),
        ),
    ]
