# Generated by Django 3.0.5 on 2020-05-01 14:54

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import djangoyearlessdate.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicWorkExperience',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('position_type', models.CharField(blank=True, choices=[('Adjunct', 'Adjunct'), ('Consultation', 'Consultation'), ('Sessional', 'Sessional'), ('Term', 'Term'), ('Visiting Professorship', 'Visiting Professorship')], help_text="The nature of the person's position", max_length=30, null=True)),
                ('position_title', models.TextField(blank=True, help_text="The person's position at the institution", max_length=250, null=True)),
                ('position_status', models.CharField(blank=True, choices=[('Full-time', 'Full-time'), ('Part-time', 'Part-time')], help_text='The status of the position with regard to tenure', max_length=20, null=True)),
                ('academic_rank', models.CharField(blank=True, choices=[('Assistant Professor', 'Assistant Professor'), ('Associate Professor', 'Associate Professor'), ('Emeritus', 'Emeritus'), ('Lecturer', 'Lecturer'), ('Professor', 'Professor')], help_text='The rank of the faculty member in the academic institution', max_length=20, null=True)),
                ('start_date', models.DateField(blank=True, help_text='The date the person started this position', null=True)),
                ('end_date', models.DateField(blank=True, help_text='Date the person did not occupy this position anymore', null=True)),
                ('work_description', models.TextField(blank=True, help_text='Description of the duties for this position', max_length=1000, null=True)),
                ('department', models.CharField(blank=True, help_text='The department within the given institution', max_length=50, null=True)),
                ('campus', models.CharField(blank=True, help_text='The location of the relevant campus of the institution', max_length=100, null=True)),
                ('tenure_status', models.CharField(blank=True, choices=[('Non Tenure Track', 'Non Tenure Track'), ('Tenure', 'Tenure'), ('Tenure Track', 'Tenure Track')], help_text='The status of the position with regard to tenure', max_length=20, null=True)),
                ('tenure_start_date', models.DateField(blank=True, help_text='The date that the person achieved tenure within the named position', null=True)),
                ('tenure_end_date', models.DateField(blank=True, help_text='The date when the tenure stopped, if applicable', null=True)),
            ],
            options={
                'db_table': 'academic_work_experience',
            },
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'activity',
            },
        ),
        migrations.CreateModel(
            name='Credential',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.TextField(blank=True, help_text='The name or title of the designation earned', max_length=250, null=True)),
                ('effective_date', models.DateField(blank=True, help_text='The date the designation was received', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date the designation expires, if applicable', null=True)),
                ('description', models.TextField(blank=True, help_text="A description of the person's designation", max_length=1000, null=True)),
            ],
            options={
                'db_table': 'credential',
            },
        ),
        migrations.CreateModel(
            name='Degree',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(blank=True, choices=[("Bachelor's", "Bachelor's"), ("Bachelor's Equivalent", "Bachelor's Equivalent"), ("Bachelor's Honours", "Bachelor's Honours"), ("Master's Equivalent", "Master's Equivalent"), ("Master's non-Thesis", "Master's non-Thesis"), ("Master's Thesis", "Master's Thesis"), ('Doctorate', 'Doctorate'), ('Doctorate Equivalent', 'Doctorate Equivalent'), ('Post-doctorate', 'Post-doctorate'), ('Certificate', 'Certificate'), ('Diploma', 'Diploma'), ('Habilitation', 'Habilitation'), ('Research Associate', 'Research Associate')], max_length=30, null=True)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('specialization', models.CharField(blank=True, max_length=100, null=True)),
                ('thesis_title', models.TextField(blank=True, max_length=500, null=True)),
                ('status', models.CharField(choices=[('All But Degree', 'All But Degree'), ('Completed', 'Completed'), ('In Progress', 'In Progress'), ('Withdrawn', 'Withdrawn')], max_length=20)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('expected_date', models.DateField(blank=True, null=True)),
                ('phd_without_masters', models.BooleanField(blank=True, default=False, null=True)),
            ],
            options={
                'db_table': 'degree',
            },
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'education',
            },
        ),
        migrations.CreateModel(
            name='Employment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'employment',
            },
        ),
        migrations.CreateModel(
            name='Identification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(choices=[('Dr.', 'Dr.'), ('Mr.', 'Mr.'), ('Mrs.', 'Mrs.'), ('Ms.', 'Ms.'), ('Professor', 'Professor'), ('Reverend', 'Reverend')], max_length=50)),
                ('family_name', models.CharField(help_text="A person's surname", max_length=50)),
                ('first_name', models.CharField(max_length=50)),
                ('middle_name', models.CharField(blank=True, max_length=50, null=True)),
                ('previous_family_name', models.CharField(blank=True, max_length=50, null=True)),
                ('previous_first_name', models.CharField(blank=True, max_length=50, null=True)),
                ('date_of_birth', djangoyearlessdate.models.YearlessDateField(max_length=4)),
                ('sex', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('No Response', 'No Response')], max_length=20, null=True)),
                ('designated_group', models.CharField(blank=True, choices=[('Aboriginal', 'Aboriginal'), ('Disabled', 'Disabled'), ('Visible Minority', 'Visible Minority')], max_length=50, null=True)),
                ('correspondence_language', models.CharField(choices=[('English', 'English'), ('French', 'French')], max_length=10)),
                ('canadian_residency_status', models.CharField(blank=True, choices=[('Canadian Citizen', 'Canadian Citizen'), ('Not Applicable', 'Not Applicable'), ('Permanent Resident', 'Permanent Resident'), ('Refugee', 'Refugee'), ('Student Work Permit', 'Student Work Permit'), ('Study Permit', 'Study Permit'), ('Visitor Visa', 'Visitor Visa'), ('Work Permit', 'Work Permit')], max_length=50, null=True)),
                ('permanent_residency', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=50, null=True)),
                ('permanent_residency_start_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'db_table': 'identification',
            },
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'membership',
            },
        ),
        migrations.CreateModel(
            name='NonAcademicWorkExperience',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('position_title', models.TextField(blank=True, help_text='The position of the person with the employer', max_length=250, null=True)),
                ('position_status', models.CharField(blank=True, choices=[('Full-time', 'Full-time'), ('Part-time', 'Part-time')], help_text="The nature of the person's position", max_length=10, null=True)),
                ('start_date', models.DateField(blank=True, help_text='The date the position started', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date the position ended', null=True)),
                ('work_description', models.CharField(blank=True, help_text='The responsibilities and duties associated with this position', max_length=1000, null=True)),
                ('unit_division', models.CharField(blank=True, help_text='The department within the given company or organization', max_length=100, null=True)),
                ('employment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Employment')),
            ],
            options={
                'db_table': 'non_academic_work_experience',
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('type', models.CharField(blank=True, max_length=50, null=True)),
                ('country', models.CharField(blank=True, max_length=50, null=True)),
                ('subdivision', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'organization',
            },
        ),
        migrations.CreateModel(
            name='OtherOrganization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(blank=True, help_text='The type of organization, only if Other Organization is entered', max_length=20, null=True)),
                ('name', models.CharField(blank=True, help_text="The organization's name, only if not in Organization list", max_length=50, null=True)),
            ],
            options={
                'db_table': 'other_organization',
            },
        ),
        migrations.CreateModel(
            name='PersonalInformation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'personal_information',
            },
        ),
        migrations.CreateModel(
            name='ResearchFundingHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('funding_type', models.CharField(blank=True, choices=[('Contract', 'Contract'), ('Fellowship', 'Fellowship'), ('Grant', 'Grant'), ('Research Chair', 'Research Chair'), ('Scholarship', 'Scholarship')], help_text='The nature of the funding received', max_length=20, null=True)),
                ('start_date', models.DateField(blank=True, help_text='The date when the funding for this project started.', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date when the funding for this project ended.', null=True)),
                ('funding_title', models.TextField(blank=True, help_text='The nature of the grant received', max_length=250, null=True)),
                ('grant_type', models.CharField(blank=True, choices=[('Equipment', 'Equipment'), ('Establishment', 'Establishment'), ('Infrastructure', 'Infrastructure'), ('Operating', 'Operating'), ('Workshop', 'Workshop')], max_length=20, null=True)),
                ('project_description', models.TextField(blank=True, help_text='description of project for which funding was received', max_length=1000, null=True)),
                ('clinical_research_project', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=5, null=True)),
                ('funding_status', models.CharField(blank=True, choices=[('Awarded', 'Awarded'), ('Completed', 'Completed'), ('Declined', 'Declined'), ('Under Review', 'Under Review')], help_text='current status of the funding of the overall project.', max_length=30, null=True)),
                ('funding_role', models.CharField(blank=True, choices=[('Co-applicant', 'Co-applicant'), ('Co-investigator', 'Co-investigator'), ('Co-knowledge User', 'Co-knowledge User'), ('Collaborator', 'Collaborator'), ('Decision Maker', 'Decision Maker'), ('Policy Maker', 'Policy Maker'), ('Principal Applicant', 'Principal Applicant'), ('Principal Investigator', 'Principal Investigator'), ('Principal Knowledge User', 'Principal Knowledge User')], help_text="Person's role in this research, as defined by the funding organization", max_length=30, null=True)),
                ('research_uptake', models.TextField(blank=True, help_text='strategies used to promote the uptake of your research findings.', max_length=1000, null=True)),
            ],
            options={
                'db_table': 'research_funding_history',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('researcher_status', models.CharField(blank=True, choices=[('Doctoral Student', 'Doctoral Student'), ("Master's Student", "Master's Student"), ('Post-doctoral Student', 'Post-doctoral Student'), ('Researcher', 'Researcher')], help_text='research status', max_length=30, null=True)),
                ('career_start_date', models.DateField(blank=True, help_text='When did you start your research career', null=True)),
                ('engaged_in_clinical_research', models.BooleanField(default=False, help_text='if you are involved in clinical research activities (with drugs)')),
                ('key_theory', models.TextField(blank=True, help_text='The key theories and methodologies used in research', max_length=500, null=True)),
                ('research_interest', models.TextField(blank=True, max_length=1000, null=True)),
                ('experience_summary', models.TextField(blank=True, help_text='summary of research experience', max_length=1000, null=True)),
                ('country', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, null=True, size=None)),
            ],
            options={
                'db_table': 'user_profile',
            },
        ),
        migrations.CreateModel(
            name='Website',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(choices=[('Blog', 'Blog'), ('Community', 'Community'), ('Corporate', 'Corporate'), ('Personal', 'Personal'), ('Social Media', 'Social Media')], max_length=20)),
                ('url', models.CharField(max_length=100, null=True)),
                ('personal_information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.PersonalInformation')),
            ],
            options={
                'db_table': 'website',
            },
        ),
        migrations.CreateModel(
            name='TemporalPeriod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('from_year', models.IntegerField(blank=True, help_text='The starting year of the temporal period', max_length=4, null=True)),
                ('from_year_period', models.CharField(blank=True, choices=[('AD', 'AD'), ('BC', 'BC')], help_text='The period of the starting year', max_length=2, null=True)),
                ('to_year', models.IntegerField(blank=True, help_text='The end year of the temporal period', max_length=4, null=True)),
                ('to_year_period', models.CharField(blank=True, choices=[('AD', 'AD'), ('BC', 'BC')], help_text='The period of the ending year', max_length=2, null=True)),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.UserProfile')),
            ],
            options={
                'db_table': 'temporal_period',
            },
        ),
        migrations.CreateModel(
            name='Telephone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('phone_type', models.CharField(choices=[('Fax', 'Fax'), ('Home', 'Home'), ('Laboratory', 'Laboratory'), ('Mobile', 'Mobile'), ('Pager', 'Pager'), ('Temporary', 'Temporary'), ('Work', 'Work')], max_length=50)),
                ('country_code', models.CharField(max_length=5, null=True)),
                ('area_code', models.CharField(max_length=5, null=True)),
                ('number', models.CharField(max_length=12, null=True)),
                ('extension', models.CharField(max_length=6, null=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('personal_information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.PersonalInformation')),
            ],
            options={
                'db_table': 'telephone',
            },
        ),
        migrations.CreateModel(
            name='TechnologicalApplication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subfield', models.CharField(blank=True, max_length=50, null=True)),
                ('category', models.CharField(blank=True, choices=[('Agro-alimentary', 'Agro-alimentary'), ('Chemistry / Biochemistry', 'Chemistry / Biochemistry'), ('Medical materials and instrumentation', 'Medical materials and instrumentation'), ('Orthopaedic devices', 'Orthopaedic devices'), ('Pharmacy', 'Pharmacy')], max_length=50, null=True)),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.UserProfile')),
            ],
            options={
                'db_table': 'technological_application',
            },
        ),
        migrations.CreateModel(
            name='Supervisor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, null=True)),
                ('start_date', models.DateField(blank=True, help_text='The date when the supervision started', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date when the supervision ended', null=True)),
                ('degree', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Degree')),
            ],
            options={
                'db_table': 'supervisor',
            },
        ),
        migrations.CreateModel(
            name='ResearchUptakeHolder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('stakeholder', models.CharField(blank=True, choices=[('Academic Personnel', 'Academic Personnel'), ('Charity Organizations', 'Charity Organizations'), ('Elders', 'Elders'), ('General Public', 'General Public'), ('Government Personnel', 'Government Personnel'), ('Healthcare Personnel', 'Healthcare Personnel'), ('Industrial Association/Producer Group', 'Industrial Association/Producer Group'), ('Industrial Consortium', 'Industrial Consortium'), ('Industry/Business (>500 employees)', 'Industry/Business (>500 employees)'), ('Industry/Business-Medium (100 to 500 employees)', 'Industry/Business-Medium (100 to 500 employees)'), ('Industry/Business-Small (<100 employees)', 'Industry/Business-Small (<100 employees)'), ('Patients', 'Patients'), ('Policy Maker/Regulator', 'Policy Maker/Regulator'), ('Private Not-for-Profit Organization', 'Private Not-for-Profit Organization'), ('The Media', 'The Media'), ('Utility', 'Utility')], help_text='The group or individual which uptake research findings', max_length=50, null=True)),
                ('research_funding_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ResearchFundingHistory')),
            ],
            options={
                'db_table': 'research_uptake_holder',
            },
        ),
        migrations.CreateModel(
            name='ResearchSpecializationKeyword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('keyword', models.CharField(blank=True, max_length=50, null=True)),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.UserProfile')),
            ],
            options={
                'db_table': 'research_specialization_keyword',
            },
        ),
        migrations.CreateModel(
            name='ResearchSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('country', models.CharField(blank=True, help_text='The place where the research was done', max_length=50, null=True)),
                ('subdivision', models.CharField(blank=True, help_text='Division where research was done', max_length=50, null=True)),
                ('setting_type', models.CharField(blank=True, help_text='The type of environment where the research was conducted', max_length=10, null=True)),
                ('research_funding_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ResearchFundingHistory')),
            ],
            options={
                'db_table': 'research_setting',
            },
        ),
        migrations.CreateModel(
            name='ResearchDiscipline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('discipline', models.CharField(blank=True, max_length=50, null=True)),
                ('sector_of_discipline', models.CharField(blank=True, max_length=50, null=True)),
                ('field', models.CharField(blank=True, max_length=50, null=True)),
                ('academic_work_experience', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.AcademicWorkExperience')),
                ('credential', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.Credential')),
                ('degree', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.Degree')),
                ('non_academic_work_experience', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.NonAcademicWorkExperience')),
                ('research_funding_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ResearchFundingHistory')),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.UserProfile')),
            ],
            options={
                'db_table': 'research_discipline',
            },
        ),
        migrations.CreateModel(
            name='ResearchCentre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('country', models.CharField(blank=True, max_length=50, null=True)),
                ('subdivision', models.CharField(blank=True, max_length=50, null=True)),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.UserProfile')),
            ],
            options={
                'db_table': 'research_centre',
            },
        ),
        migrations.CreateModel(
            name='OtherMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('role', models.CharField(blank=True, help_text="The person's role in this activity", max_length=20, null=True)),
                ('name', models.TextField(blank=True, help_text='The name of the committee', max_length=250, null=True)),
                ('start_date', models.DateField(blank=True, help_text='The date on which membership began', null=True)),
                ('description', models.TextField(blank=True, help_text='Description of services contributed by the person as part of a committee', max_length=1000, null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date on which membership ended, if applicable', null=True)),
                ('membership', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Membership')),
                ('organization', models.OneToOneField(blank=True, help_text='The name of the organisation of which the person is a member', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Organization')),
                ('other_organization', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.OtherOrganization')),
            ],
            options={
                'db_table': 'other_membership',
            },
        ),
        migrations.CreateModel(
            name='OtherInvestigator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, help_text='Name of the investigator who has participated in this research project. Family name followed by a comma and by the the first name, without any punctuation', max_length=100, null=True)),
                ('role', models.CharField(blank=True, choices=[('Co-applicant', 'Co-applicant'), ('Co-investigator', 'Co-investigator'), ('Co-knowledge User', 'Co-knowledge User'), ('Collaborator', 'Collaborator'), ('Decision Maker', 'Decision Maker'), ('Policy Maker', 'Policy Maker'), ('Principal Applicant', 'Principal Applicant'), ('Principal Investigator', 'Principal Investigator'), ('Principal Knowledge User', 'Principal Knowledge User')], help_text='The role of this investigator', max_length=30, null=True)),
                ('research_funding_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ResearchFundingHistory')),
            ],
            options={
                'db_table': 'other_investigator',
            },
        ),
        migrations.AddField(
            model_name='nonacademicworkexperience',
            name='organization',
            field=models.OneToOneField(blank=True, help_text='The name of the organization where the person worked', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Organization'),
        ),
        migrations.AddField(
            model_name='nonacademicworkexperience',
            name='other_organization',
            field=models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.OtherOrganization'),
        ),
        migrations.CreateModel(
            name='LeavesOfAbsence',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('leave_type', models.CharField(blank=True, choices=[('Administrative', 'Administrative'), ('Bereavement', 'Bereavement'), ('Medical', 'Medical'), ('Other Circumstances', 'Other Circumstances'), ('Parental', 'Parental'), ('Sabbatical', 'Sabbatical'), ('Special', 'Special'), ('Study', 'Study'), ('Unpaid', 'Unpaid')], help_text='The nature of the leave of absence', max_length=50, null=True)),
                ('start_date', models.DateField(blank=True, help_text='The date the leave started', null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date the leave ended, if applicable', null=True)),
                ('absence_description', models.TextField(blank=True, help_text='description of the leave of absence', max_length=1000, null=True)),
                ('employment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Employment')),
                ('organization', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.Organization')),
                ('other_organization', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.OtherOrganization')),
            ],
            options={
                'db_table': 'leaves_of_absence',
            },
        ),
        migrations.CreateModel(
            name='LanguageSkill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('language', models.CharField(blank=True, help_text='The language in which the person is indicating a competency.', max_length=20, null=True)),
                ('can_read', models.BooleanField(blank=True, default=False, help_text='The capacity of the person to comprehend the indicated language in written form.', null=True)),
                ('can_write', models.BooleanField()),
                ('can_speak', models.BooleanField()),
                ('can_understand', models.BooleanField()),
                ('peer_review', models.BooleanField()),
                ('personal_information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.PersonalInformation')),
            ],
            options={
                'db_table': 'language_skill',
            },
        ),
        migrations.CreateModel(
            name='GeographicalRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('region', models.CharField(blank=True, choices=[('Africa', 'Africa'), ('Antarctic and Arctic', 'Antarctic and Arctic'), ('Asia', 'Asia'), ('Atlantic Provinces', 'Atlantic Provinces'), ('Caribbean', 'Caribbean'), ('Central Africa', 'Central Africa'), ('Central America', 'Central America'), ('Central Asia', 'Central Asia'), ('Central Canada', 'Central Canada'), ('East Asia', 'East Asia'), ('Eastern Africa', 'Eastern Africa'), ('Eastern Europe', 'Eastern Europe'), ('Europe', 'Europe'), ('Former Soviet Union', 'Former Soviet Union'), ('International', 'International'), ('Melanesia', 'Melanesia'), ('Micronesia', 'Micronesia'), ('Near and Middle East', 'Near and Middle East'), ('North America', 'North America'), ('Northern Africa', 'Northern Africa'), ('Northern Canada', 'Northern Canada'), ('Not subject to geographical classification', 'Not subject to geographical classification'), ('Oceania', 'Oceania'), ('Polynesia', 'Polynesia'), ('Scandinavia', 'Scandinavia'), ('South America', 'South America'), ('South Asia', 'South Asia'), ('Southeast Asia', 'Southeast Asia'), ('Southern Africa', 'Southern Africa'), ('Southwest Asia', 'Southwest Asia'), ('Western Africa', 'Western Africa'), ('Western Canada', 'Western Canada'), ('Western Europe', 'Western Europe')], max_length=50, null=True)),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.UserProfile')),
            ],
            options={
                'db_table': 'geographical_region',
            },
        ),
        migrations.CreateModel(
            name='FundingSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organization', models.CharField(blank=True, help_text='Organization that provided funding for this project', max_length=50, null=True)),
                ('other_organization', models.CharField(blank=True, help_text="The funding organization's name, only if not in the above column", max_length=50, null=True)),
                ('program_name', models.CharField(blank=True, help_text="The funding organization's name, only if not in the above list", max_length=50, null=True)),
                ('reference_no', models.CharField(blank=True, help_text="organization's funding reference number, if applicable", max_length=20, null=True)),
                ('total_funding_in_canadian_dollar', models.IntegerField(blank=True, help_text='total amount applied for or received from this organization in CAN $', null=True)),
                ('total_funding', models.IntegerField(blank=True, help_text='total amount applied for or received from this organization', null=True)),
                ('total_funding_currency', models.CharField(blank=True, help_text='The currency in which the money was awarded', max_length=20, null=True)),
                ('funding_received', models.IntegerField(blank=True, help_text='From the total funding received from this organization for this project', null=True)),
                ('funding_received_in_canadian_dollar', models.IntegerField(blank=True, help_text='total amount applied for or received from this organization in CAN $', null=True)),
                ('funding_received_currency', models.CharField(blank=True, help_text='The currency in which the money was awarded', max_length=20, null=True)),
                ('start_date', models.DateField(blank=True, help_text='date when the funding from this organization, for this project, started', null=True)),
                ('end_date', models.DateField(blank=True, help_text='date when the funding from this organization, for this project, ended', null=True)),
                ('renewable', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Indicate if the funding received from this organization is renewable', max_length=5, null=True)),
                ('competitive', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Indicate if the funding received from this organization is renewable', max_length=5, null=True)),
                ('research_funding_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ResearchFundingHistory')),
            ],
            options={
                'db_table': 'funding_source',
            },
        ),
        migrations.CreateModel(
            name='FundingByYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('start_date', models.DateField(blank=True, help_text='Breakdown of the total funding received from one or more organizations for this project, by year.', null=True)),
                ('end_date', models.DateField(blank=True, help_text='Breakdown of the total funding received from one or more organizations for this project, by year.', null=True)),
                ('total_funding_in_canadian_dollar', models.IntegerField(blank=True, help_text='The total amount that was received for this period for this project in CAN $', null=True)),
                ('total_funding', models.IntegerField(blank=True, help_text='The total amount that was received for this period for this project', null=True)),
                ('total_funding_currency', models.CharField(blank=True, help_text='The currency in which the money was awarded', max_length=20, null=True)),
                ('funding_received', models.IntegerField(blank=True, help_text='The amount that you received for this period for this project', null=True)),
                ('funding_received_in_canadian_dollar', models.IntegerField(blank=True, help_text='The amount that you received for this period for this project CAN $', null=True)),
                ('funding_received_currency', models.CharField(blank=True, help_text='The currency in which the money was awarded', max_length=20, null=True)),
                ('time_commitment', models.IntegerField(blank=True, help_text='approximate percentage of regular working hours over this time period that were spent on this project', null=True)),
                ('research_funding_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ResearchFundingHistory')),
            ],
            options={
                'db_table': 'funding_by_year',
            },
        ),
        migrations.CreateModel(
            name='FieldOfApplication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('field', models.CharField(blank=True, max_length=50, null=True)),
                ('subfield', models.CharField(blank=True, max_length=50, null=True)),
                ('academic_work_experience', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.AcademicWorkExperience')),
                ('credential', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.Credential')),
                ('degree', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.Degree')),
                ('non_academic_work_experience', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.NonAcademicWorkExperience')),
                ('research_funding_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ResearchFundingHistory')),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.UserProfile')),
            ],
            options={
                'db_table': 'field_of_application',
            },
        ),
        migrations.CreateModel(
            name='Email',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(choices=[('Personal', 'Personal'), ('Temporary', 'Temporary'), ('Work', 'Work')], max_length=10)),
                ('address', models.CharField(max_length=100)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('personal_information', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.PersonalInformation')),
            ],
            options={
                'db_table': 'email',
            },
        ),
        migrations.CreateModel(
            name='DisciplineTrainedIn',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('discipline', models.CharField(blank=True, max_length=50, null=True)),
                ('sector', models.CharField(blank=True, choices=[('Arts and literature', 'Arts and literature'), ('Health Sciences', 'Health Sciences'), ('Human and social sciences', 'Human and social sciences'), ('Natural Sciences and Engineering', 'Natural Sciences and Engineering')], max_length=50, null=True)),
                ('fields', models.CharField(blank=True, choices=[('Applied Sciences', 'Applied Sciences'), ('Arts and Literature Studies', 'Arts and Literature Studies'), ('Education', 'Education'), ('Engineering', 'Engineering'), ('Humanities', 'Humanities'), ('Management', 'Management'), ('Mathematical Sciences', 'Mathematical Sciences'), ('Medical Sciences', 'Medical Sciences'), ('Natural Sciences', 'Natural Sciences'), ('Nursing', 'Nursing'), ('Physical Education and Rehabilitation', 'Physical Education and Rehabilitation'), ('Social Sciences', 'Social Sciences'), ('Writing and Fine Arts', 'Writing and Fine Arts')], max_length=50, null=True)),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.UserProfile')),
            ],
            options={
                'db_table': 'discipline_trained_in',
            },
        ),
        migrations.AddField(
            model_name='degree',
            name='education',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Education'),
        ),
        migrations.CreateModel(
            name='CountryOfCitizenship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, help_text='List all countries that the person is a citizen of', max_length=50, null=True)),
                ('identification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Identification')),
            ],
            options={
                'db_table': 'country_of_citizenship',
            },
        ),
        migrations.CreateModel(
            name='CommitteeMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('role', models.CharField(blank=True, choices=[('Chair', 'Chair'), ('Co-chair', 'Co-chair'), ('Committee Member', 'Committee Member'), ('Ex-Officio', 'Ex-Officio'), ('Group Chair', 'Group Chair')], help_text="The person's role in this activity", max_length=20, null=True)),
                ('name', models.TextField(blank=True, help_text='The name of the committee', max_length=250, null=True)),
                ('start_date', models.DateField(blank=True, help_text='The date on which membership began', null=True)),
                ('description', models.TextField(blank=True, help_text='Description of services contributed by the person as part of a committee', max_length=1000, null=True)),
                ('end_date', models.DateField(blank=True, help_text='The date on which membership ended, if applicable', null=True)),
                ('membership', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Membership')),
                ('organization', models.OneToOneField(blank=True, help_text='The name of the organisation of which the person is a member', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Organization')),
                ('other_organization', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.OtherOrganization')),
            ],
            options={
                'db_table': 'committee_membership',
            },
        ),
        migrations.CreateModel(
            name='AreaOfResearch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('area', models.CharField(blank=True, max_length=50, null=True)),
                ('sector', models.CharField(blank=True, max_length=50, null=True)),
                ('field', models.CharField(blank=True, max_length=50, null=True)),
                ('subfield', models.CharField(blank=True, max_length=50, null=True)),
                ('academic_work_experience', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.AcademicWorkExperience')),
                ('credential', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.Credential')),
                ('degree', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ccv.Degree')),
                ('non_academic_work_experience', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.NonAcademicWorkExperience')),
                ('research_funding_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.ResearchFundingHistory')),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.UserProfile')),
            ],
            options={
                'db_table': 'area_of_research',
            },
        ),
        migrations.CreateModel(
            name='Affiliation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('position_title', models.TextField(blank=True, help_text='The name or title of the position', max_length=250, null=True)),
                ('department', models.CharField(blank=True, help_text='The department within the given organization', max_length=100, null=True)),
                ('activity_description', models.CharField(blank=True, help_text="A description of the person's activities with this organization", max_length=1000, null=True)),
                ('start_date', models.DateField(blank=True, help_text='The date when the persone became affiliated with this organization', null=True)),
                ('end_date', models.DateField(blank=True, help_text="The date when the person's affiliation with this organization ended", null=True)),
                ('employment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Employment')),
                ('organization', models.OneToOneField(blank=True, help_text='The organization with which the person is affiliated.', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.Organization')),
                ('other_organization', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.OtherOrganization')),
            ],
            options={
                'db_table': 'affiliation',
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(choices=[('Courier', 'Courier'), ('Home', 'Home'), ('Mailing', 'Mailing'), ('Primary Affiliation', 'Primary Affiliation'), ('Temporary', 'Temporary')], max_length=20)),
                ('line_1', models.CharField(max_length=50)),
                ('line_2', models.CharField(max_length=50)),
                ('line_3', models.CharField(max_length=50)),
                ('line_4', models.CharField(max_length=50)),
                ('line_5', models.CharField(max_length=50)),
                ('city', models.CharField(max_length=50)),
                ('postal', models.CharField(max_length=10)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('personal_information', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='ccv.PersonalInformation')),
            ],
            options={
                'db_table': 'address',
            },
        ),
        migrations.AddField(
            model_name='academicworkexperience',
            name='employment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ccv.Employment'),
        ),
        migrations.AddField(
            model_name='academicworkexperience',
            name='organization',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ccv.Organization'),
        ),
        migrations.AddField(
            model_name='academicworkexperience',
            name='other_organization',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='ccv.OtherOrganization'),
        ),
    ]
